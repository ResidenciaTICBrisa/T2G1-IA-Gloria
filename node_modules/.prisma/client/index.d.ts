
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model occurrence
 * 
 */
export type occurrence = $Result.DefaultSelection<Prisma.$occurrencePayload>
/**
 * Model state_list
 * 
 */
export type state_list = $Result.DefaultSelection<Prisma.$state_listPayload>
/**
 * Model types_of_violence
 * 
 */
export type types_of_violence = $Result.DefaultSelection<Prisma.$types_of_violencePayload>
/**
 * Model user_fingerprint
 * 
 */
export type user_fingerprint = $Result.DefaultSelection<Prisma.$user_fingerprintPayload>
/**
 * Model user_occurrences
 * 
 */
export type user_occurrences = $Result.DefaultSelection<Prisma.$user_occurrencesPayload>
/**
 * Model violence_situations
 * 
 */
export type violence_situations = $Result.DefaultSelection<Prisma.$violence_situationsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Occurrences
 * const occurrences = await prisma.occurrence.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Occurrences
   * const occurrences = await prisma.occurrence.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.occurrence`: Exposes CRUD operations for the **occurrence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Occurrences
    * const occurrences = await prisma.occurrence.findMany()
    * ```
    */
  get occurrence(): Prisma.occurrenceDelegate<ExtArgs>;

  /**
   * `prisma.state_list`: Exposes CRUD operations for the **state_list** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more State_lists
    * const state_lists = await prisma.state_list.findMany()
    * ```
    */
  get state_list(): Prisma.state_listDelegate<ExtArgs>;

  /**
   * `prisma.types_of_violence`: Exposes CRUD operations for the **types_of_violence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Types_of_violences
    * const types_of_violences = await prisma.types_of_violence.findMany()
    * ```
    */
  get types_of_violence(): Prisma.types_of_violenceDelegate<ExtArgs>;

  /**
   * `prisma.user_fingerprint`: Exposes CRUD operations for the **user_fingerprint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_fingerprints
    * const user_fingerprints = await prisma.user_fingerprint.findMany()
    * ```
    */
  get user_fingerprint(): Prisma.user_fingerprintDelegate<ExtArgs>;

  /**
   * `prisma.user_occurrences`: Exposes CRUD operations for the **user_occurrences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_occurrences
    * const user_occurrences = await prisma.user_occurrences.findMany()
    * ```
    */
  get user_occurrences(): Prisma.user_occurrencesDelegate<ExtArgs>;

  /**
   * `prisma.violence_situations`: Exposes CRUD operations for the **violence_situations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Violence_situations
    * const violence_situations = await prisma.violence_situations.findMany()
    * ```
    */
  get violence_situations(): Prisma.violence_situationsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    occurrence: 'occurrence',
    state_list: 'state_list',
    types_of_violence: 'types_of_violence',
    user_fingerprint: 'user_fingerprint',
    user_occurrences: 'user_occurrences',
    violence_situations: 'violence_situations'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'occurrence' | 'state_list' | 'types_of_violence' | 'user_fingerprint' | 'user_occurrences' | 'violence_situations'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      occurrence: {
        payload: Prisma.$occurrencePayload<ExtArgs>
        fields: Prisma.occurrenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.occurrenceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$occurrencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.occurrenceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$occurrencePayload>
          }
          findFirst: {
            args: Prisma.occurrenceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$occurrencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.occurrenceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$occurrencePayload>
          }
          findMany: {
            args: Prisma.occurrenceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$occurrencePayload>[]
          }
          create: {
            args: Prisma.occurrenceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$occurrencePayload>
          }
          createMany: {
            args: Prisma.occurrenceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.occurrenceCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$occurrencePayload>[]
          }
          delete: {
            args: Prisma.occurrenceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$occurrencePayload>
          }
          update: {
            args: Prisma.occurrenceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$occurrencePayload>
          }
          deleteMany: {
            args: Prisma.occurrenceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.occurrenceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.occurrenceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$occurrencePayload>
          }
          aggregate: {
            args: Prisma.OccurrenceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOccurrence>
          }
          groupBy: {
            args: Prisma.occurrenceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OccurrenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.occurrenceCountArgs<ExtArgs>,
            result: $Utils.Optional<OccurrenceCountAggregateOutputType> | number
          }
        }
      }
      state_list: {
        payload: Prisma.$state_listPayload<ExtArgs>
        fields: Prisma.state_listFieldRefs
        operations: {
          findUnique: {
            args: Prisma.state_listFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$state_listPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.state_listFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$state_listPayload>
          }
          findFirst: {
            args: Prisma.state_listFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$state_listPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.state_listFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$state_listPayload>
          }
          findMany: {
            args: Prisma.state_listFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$state_listPayload>[]
          }
          create: {
            args: Prisma.state_listCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$state_listPayload>
          }
          createMany: {
            args: Prisma.state_listCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.state_listCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$state_listPayload>[]
          }
          delete: {
            args: Prisma.state_listDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$state_listPayload>
          }
          update: {
            args: Prisma.state_listUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$state_listPayload>
          }
          deleteMany: {
            args: Prisma.state_listDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.state_listUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.state_listUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$state_listPayload>
          }
          aggregate: {
            args: Prisma.State_listAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateState_list>
          }
          groupBy: {
            args: Prisma.state_listGroupByArgs<ExtArgs>,
            result: $Utils.Optional<State_listGroupByOutputType>[]
          }
          count: {
            args: Prisma.state_listCountArgs<ExtArgs>,
            result: $Utils.Optional<State_listCountAggregateOutputType> | number
          }
        }
      }
      types_of_violence: {
        payload: Prisma.$types_of_violencePayload<ExtArgs>
        fields: Prisma.types_of_violenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.types_of_violenceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$types_of_violencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.types_of_violenceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$types_of_violencePayload>
          }
          findFirst: {
            args: Prisma.types_of_violenceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$types_of_violencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.types_of_violenceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$types_of_violencePayload>
          }
          findMany: {
            args: Prisma.types_of_violenceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$types_of_violencePayload>[]
          }
          create: {
            args: Prisma.types_of_violenceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$types_of_violencePayload>
          }
          createMany: {
            args: Prisma.types_of_violenceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.types_of_violenceCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$types_of_violencePayload>[]
          }
          delete: {
            args: Prisma.types_of_violenceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$types_of_violencePayload>
          }
          update: {
            args: Prisma.types_of_violenceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$types_of_violencePayload>
          }
          deleteMany: {
            args: Prisma.types_of_violenceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.types_of_violenceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.types_of_violenceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$types_of_violencePayload>
          }
          aggregate: {
            args: Prisma.Types_of_violenceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTypes_of_violence>
          }
          groupBy: {
            args: Prisma.types_of_violenceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Types_of_violenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.types_of_violenceCountArgs<ExtArgs>,
            result: $Utils.Optional<Types_of_violenceCountAggregateOutputType> | number
          }
        }
      }
      user_fingerprint: {
        payload: Prisma.$user_fingerprintPayload<ExtArgs>
        fields: Prisma.user_fingerprintFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_fingerprintFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_fingerprintPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_fingerprintFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_fingerprintPayload>
          }
          findFirst: {
            args: Prisma.user_fingerprintFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_fingerprintPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_fingerprintFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_fingerprintPayload>
          }
          findMany: {
            args: Prisma.user_fingerprintFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_fingerprintPayload>[]
          }
          create: {
            args: Prisma.user_fingerprintCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_fingerprintPayload>
          }
          createMany: {
            args: Prisma.user_fingerprintCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_fingerprintCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_fingerprintPayload>[]
          }
          delete: {
            args: Prisma.user_fingerprintDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_fingerprintPayload>
          }
          update: {
            args: Prisma.user_fingerprintUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_fingerprintPayload>
          }
          deleteMany: {
            args: Prisma.user_fingerprintDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.user_fingerprintUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.user_fingerprintUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_fingerprintPayload>
          }
          aggregate: {
            args: Prisma.User_fingerprintAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser_fingerprint>
          }
          groupBy: {
            args: Prisma.user_fingerprintGroupByArgs<ExtArgs>,
            result: $Utils.Optional<User_fingerprintGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_fingerprintCountArgs<ExtArgs>,
            result: $Utils.Optional<User_fingerprintCountAggregateOutputType> | number
          }
        }
      }
      user_occurrences: {
        payload: Prisma.$user_occurrencesPayload<ExtArgs>
        fields: Prisma.user_occurrencesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_occurrencesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_occurrencesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_occurrencesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_occurrencesPayload>
          }
          findFirst: {
            args: Prisma.user_occurrencesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_occurrencesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_occurrencesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_occurrencesPayload>
          }
          findMany: {
            args: Prisma.user_occurrencesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_occurrencesPayload>[]
          }
          create: {
            args: Prisma.user_occurrencesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_occurrencesPayload>
          }
          createMany: {
            args: Prisma.user_occurrencesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_occurrencesCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_occurrencesPayload>[]
          }
          delete: {
            args: Prisma.user_occurrencesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_occurrencesPayload>
          }
          update: {
            args: Prisma.user_occurrencesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_occurrencesPayload>
          }
          deleteMany: {
            args: Prisma.user_occurrencesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.user_occurrencesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.user_occurrencesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$user_occurrencesPayload>
          }
          aggregate: {
            args: Prisma.User_occurrencesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser_occurrences>
          }
          groupBy: {
            args: Prisma.user_occurrencesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<User_occurrencesGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_occurrencesCountArgs<ExtArgs>,
            result: $Utils.Optional<User_occurrencesCountAggregateOutputType> | number
          }
        }
      }
      violence_situations: {
        payload: Prisma.$violence_situationsPayload<ExtArgs>
        fields: Prisma.violence_situationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.violence_situationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$violence_situationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.violence_situationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$violence_situationsPayload>
          }
          findFirst: {
            args: Prisma.violence_situationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$violence_situationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.violence_situationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$violence_situationsPayload>
          }
          findMany: {
            args: Prisma.violence_situationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$violence_situationsPayload>[]
          }
          create: {
            args: Prisma.violence_situationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$violence_situationsPayload>
          }
          createMany: {
            args: Prisma.violence_situationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.violence_situationsCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$violence_situationsPayload>[]
          }
          delete: {
            args: Prisma.violence_situationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$violence_situationsPayload>
          }
          update: {
            args: Prisma.violence_situationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$violence_situationsPayload>
          }
          deleteMany: {
            args: Prisma.violence_situationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.violence_situationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.violence_situationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$violence_situationsPayload>
          }
          aggregate: {
            args: Prisma.Violence_situationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateViolence_situations>
          }
          groupBy: {
            args: Prisma.violence_situationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Violence_situationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.violence_situationsCountArgs<ExtArgs>,
            result: $Utils.Optional<Violence_situationsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OccurrenceCountOutputType
   */

  export type OccurrenceCountOutputType = {
    user_occurrences: number
  }

  export type OccurrenceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_occurrences?: boolean | OccurrenceCountOutputTypeCountUser_occurrencesArgs
  }

  // Custom InputTypes
  /**
   * OccurrenceCountOutputType without action
   */
  export type OccurrenceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OccurrenceCountOutputType
     */
    select?: OccurrenceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OccurrenceCountOutputType without action
   */
  export type OccurrenceCountOutputTypeCountUser_occurrencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_occurrencesWhereInput
  }


  /**
   * Count Type State_listCountOutputType
   */

  export type State_listCountOutputType = {
    occurrence: number
  }

  export type State_listCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    occurrence?: boolean | State_listCountOutputTypeCountOccurrenceArgs
  }

  // Custom InputTypes
  /**
   * State_listCountOutputType without action
   */
  export type State_listCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the State_listCountOutputType
     */
    select?: State_listCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * State_listCountOutputType without action
   */
  export type State_listCountOutputTypeCountOccurrenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: occurrenceWhereInput
  }


  /**
   * Count Type User_fingerprintCountOutputType
   */

  export type User_fingerprintCountOutputType = {
    user_occurrences: number
    occurrence: number
  }

  export type User_fingerprintCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_occurrences?: boolean | User_fingerprintCountOutputTypeCountUser_occurrencesArgs
    occurrence?: boolean | User_fingerprintCountOutputTypeCountOccurrenceArgs
  }

  // Custom InputTypes
  /**
   * User_fingerprintCountOutputType without action
   */
  export type User_fingerprintCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_fingerprintCountOutputType
     */
    select?: User_fingerprintCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * User_fingerprintCountOutputType without action
   */
  export type User_fingerprintCountOutputTypeCountUser_occurrencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_occurrencesWhereInput
  }

  /**
   * User_fingerprintCountOutputType without action
   */
  export type User_fingerprintCountOutputTypeCountOccurrenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: occurrenceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model occurrence
   */

  export type AggregateOccurrence = {
    _count: OccurrenceCountAggregateOutputType | null
    _avg: OccurrenceAvgAggregateOutputType | null
    _sum: OccurrenceSumAggregateOutputType | null
    _min: OccurrenceMinAggregateOutputType | null
    _max: OccurrenceMaxAggregateOutputType | null
  }

  export type OccurrenceAvgAggregateOutputType = {
    id_occurrence: number | null
    id_user: number | null
    latitude: Decimal | null
    longitude: Decimal | null
  }

  export type OccurrenceSumAggregateOutputType = {
    id_occurrence: bigint | null
    id_user: bigint | null
    latitude: Decimal | null
    longitude: Decimal | null
  }

  export type OccurrenceMinAggregateOutputType = {
    id_occurrence: bigint | null
    id_user: bigint | null
    datetime_submission: Date | null
    age_group: string | null
    datetime_violence: Date | null
    city_violence: string | null
    state_violence: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    violences_options: string | null
    violence_type: string | null
  }

  export type OccurrenceMaxAggregateOutputType = {
    id_occurrence: bigint | null
    id_user: bigint | null
    datetime_submission: Date | null
    age_group: string | null
    datetime_violence: Date | null
    city_violence: string | null
    state_violence: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    violences_options: string | null
    violence_type: string | null
  }

  export type OccurrenceCountAggregateOutputType = {
    id_occurrence: number
    id_user: number
    datetime_submission: number
    age_group: number
    datetime_violence: number
    city_violence: number
    state_violence: number
    latitude: number
    longitude: number
    violences_options: number
    violence_type: number
    _all: number
  }


  export type OccurrenceAvgAggregateInputType = {
    id_occurrence?: true
    id_user?: true
    latitude?: true
    longitude?: true
  }

  export type OccurrenceSumAggregateInputType = {
    id_occurrence?: true
    id_user?: true
    latitude?: true
    longitude?: true
  }

  export type OccurrenceMinAggregateInputType = {
    id_occurrence?: true
    id_user?: true
    datetime_submission?: true
    age_group?: true
    datetime_violence?: true
    city_violence?: true
    state_violence?: true
    latitude?: true
    longitude?: true
    violences_options?: true
    violence_type?: true
  }

  export type OccurrenceMaxAggregateInputType = {
    id_occurrence?: true
    id_user?: true
    datetime_submission?: true
    age_group?: true
    datetime_violence?: true
    city_violence?: true
    state_violence?: true
    latitude?: true
    longitude?: true
    violences_options?: true
    violence_type?: true
  }

  export type OccurrenceCountAggregateInputType = {
    id_occurrence?: true
    id_user?: true
    datetime_submission?: true
    age_group?: true
    datetime_violence?: true
    city_violence?: true
    state_violence?: true
    latitude?: true
    longitude?: true
    violences_options?: true
    violence_type?: true
    _all?: true
  }

  export type OccurrenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which occurrence to aggregate.
     */
    where?: occurrenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of occurrences to fetch.
     */
    orderBy?: occurrenceOrderByWithRelationInput | occurrenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: occurrenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` occurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` occurrences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned occurrences
    **/
    _count?: true | OccurrenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OccurrenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OccurrenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OccurrenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OccurrenceMaxAggregateInputType
  }

  export type GetOccurrenceAggregateType<T extends OccurrenceAggregateArgs> = {
        [P in keyof T & keyof AggregateOccurrence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOccurrence[P]>
      : GetScalarType<T[P], AggregateOccurrence[P]>
  }




  export type occurrenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: occurrenceWhereInput
    orderBy?: occurrenceOrderByWithAggregationInput | occurrenceOrderByWithAggregationInput[]
    by: OccurrenceScalarFieldEnum[] | OccurrenceScalarFieldEnum
    having?: occurrenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OccurrenceCountAggregateInputType | true
    _avg?: OccurrenceAvgAggregateInputType
    _sum?: OccurrenceSumAggregateInputType
    _min?: OccurrenceMinAggregateInputType
    _max?: OccurrenceMaxAggregateInputType
  }

  export type OccurrenceGroupByOutputType = {
    id_occurrence: bigint
    id_user: bigint
    datetime_submission: Date
    age_group: string
    datetime_violence: Date
    city_violence: string | null
    state_violence: string
    latitude: Decimal
    longitude: Decimal
    violences_options: string
    violence_type: string
    _count: OccurrenceCountAggregateOutputType | null
    _avg: OccurrenceAvgAggregateOutputType | null
    _sum: OccurrenceSumAggregateOutputType | null
    _min: OccurrenceMinAggregateOutputType | null
    _max: OccurrenceMaxAggregateOutputType | null
  }

  type GetOccurrenceGroupByPayload<T extends occurrenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OccurrenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OccurrenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OccurrenceGroupByOutputType[P]>
            : GetScalarType<T[P], OccurrenceGroupByOutputType[P]>
        }
      >
    >


  export type occurrenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_occurrence?: boolean
    id_user?: boolean
    datetime_submission?: boolean
    age_group?: boolean
    datetime_violence?: boolean
    city_violence?: boolean
    state_violence?: boolean
    latitude?: boolean
    longitude?: boolean
    violences_options?: boolean
    violence_type?: boolean
    state_list?: boolean | state_listDefaultArgs<ExtArgs>
    user_fingerprint?: boolean | user_fingerprintDefaultArgs<ExtArgs>
    user_occurrences?: boolean | occurrence$user_occurrencesArgs<ExtArgs>
    _count?: boolean | OccurrenceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["occurrence"]>

  export type occurrenceSelectScalar = {
    id_occurrence?: boolean
    id_user?: boolean
    datetime_submission?: boolean
    age_group?: boolean
    datetime_violence?: boolean
    city_violence?: boolean
    state_violence?: boolean
    latitude?: boolean
    longitude?: boolean
    violences_options?: boolean
    violence_type?: boolean
  }


  export type occurrenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    state_list?: boolean | state_listDefaultArgs<ExtArgs>
    user_fingerprint?: boolean | user_fingerprintDefaultArgs<ExtArgs>
    user_occurrences?: boolean | occurrence$user_occurrencesArgs<ExtArgs>
    _count?: boolean | OccurrenceCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $occurrencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "occurrence"
    objects: {
      state_list: Prisma.$state_listPayload<ExtArgs>
      user_fingerprint: Prisma.$user_fingerprintPayload<ExtArgs>
      user_occurrences: Prisma.$user_occurrencesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_occurrence: bigint
      id_user: bigint
      datetime_submission: Date
      age_group: string
      datetime_violence: Date
      city_violence: string | null
      state_violence: string
      latitude: Prisma.Decimal
      longitude: Prisma.Decimal
      violences_options: string
      violence_type: string
    }, ExtArgs["result"]["occurrence"]>
    composites: {}
  }


  type occurrenceGetPayload<S extends boolean | null | undefined | occurrenceDefaultArgs> = $Result.GetResult<Prisma.$occurrencePayload, S>

  type occurrenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<occurrenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OccurrenceCountAggregateInputType | true
    }

  export interface occurrenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['occurrence'], meta: { name: 'occurrence' } }
    /**
     * Find zero or one Occurrence that matches the filter.
     * @param {occurrenceFindUniqueArgs} args - Arguments to find a Occurrence
     * @example
     * // Get one Occurrence
     * const occurrence = await prisma.occurrence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends occurrenceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, occurrenceFindUniqueArgs<ExtArgs>>
    ): Prisma__occurrenceClient<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Occurrence that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {occurrenceFindUniqueOrThrowArgs} args - Arguments to find a Occurrence
     * @example
     * // Get one Occurrence
     * const occurrence = await prisma.occurrence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends occurrenceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, occurrenceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__occurrenceClient<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Occurrence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {occurrenceFindFirstArgs} args - Arguments to find a Occurrence
     * @example
     * // Get one Occurrence
     * const occurrence = await prisma.occurrence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends occurrenceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, occurrenceFindFirstArgs<ExtArgs>>
    ): Prisma__occurrenceClient<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Occurrence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {occurrenceFindFirstOrThrowArgs} args - Arguments to find a Occurrence
     * @example
     * // Get one Occurrence
     * const occurrence = await prisma.occurrence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends occurrenceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, occurrenceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__occurrenceClient<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Occurrences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {occurrenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Occurrences
     * const occurrences = await prisma.occurrence.findMany()
     * 
     * // Get first 10 Occurrences
     * const occurrences = await prisma.occurrence.findMany({ take: 10 })
     * 
     * // Only select the `id_occurrence`
     * const occurrenceWithId_occurrenceOnly = await prisma.occurrence.findMany({ select: { id_occurrence: true } })
     * 
    **/
    findMany<T extends occurrenceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, occurrenceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Occurrence.
     * @param {occurrenceCreateArgs} args - Arguments to create a Occurrence.
     * @example
     * // Create one Occurrence
     * const Occurrence = await prisma.occurrence.create({
     *   data: {
     *     // ... data to create a Occurrence
     *   }
     * })
     * 
    **/
    create<T extends occurrenceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, occurrenceCreateArgs<ExtArgs>>
    ): Prisma__occurrenceClient<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Occurrences.
     * @param {occurrenceCreateManyArgs} args - Arguments to create many Occurrences.
     * @example
     * // Create many Occurrences
     * const occurrence = await prisma.occurrence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends occurrenceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, occurrenceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Occurrences and returns the data saved in the database.
     * @param {occurrenceCreateManyAndReturnArgs} args - Arguments to create many Occurrences.
     * @example
     * // Create many Occurrences
     * const occurrence = await prisma.occurrence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Occurrences and only return the `id_occurrence`
     * const occurrenceWithId_occurrenceOnly = await prisma.occurrence.createManyAndReturn({ 
     *   select: { id_occurrence: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends occurrenceCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, occurrenceCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Occurrence.
     * @param {occurrenceDeleteArgs} args - Arguments to delete one Occurrence.
     * @example
     * // Delete one Occurrence
     * const Occurrence = await prisma.occurrence.delete({
     *   where: {
     *     // ... filter to delete one Occurrence
     *   }
     * })
     * 
    **/
    delete<T extends occurrenceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, occurrenceDeleteArgs<ExtArgs>>
    ): Prisma__occurrenceClient<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Occurrence.
     * @param {occurrenceUpdateArgs} args - Arguments to update one Occurrence.
     * @example
     * // Update one Occurrence
     * const occurrence = await prisma.occurrence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends occurrenceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, occurrenceUpdateArgs<ExtArgs>>
    ): Prisma__occurrenceClient<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Occurrences.
     * @param {occurrenceDeleteManyArgs} args - Arguments to filter Occurrences to delete.
     * @example
     * // Delete a few Occurrences
     * const { count } = await prisma.occurrence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends occurrenceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, occurrenceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Occurrences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {occurrenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Occurrences
     * const occurrence = await prisma.occurrence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends occurrenceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, occurrenceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Occurrence.
     * @param {occurrenceUpsertArgs} args - Arguments to update or create a Occurrence.
     * @example
     * // Update or create a Occurrence
     * const occurrence = await prisma.occurrence.upsert({
     *   create: {
     *     // ... data to create a Occurrence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Occurrence we want to update
     *   }
     * })
    **/
    upsert<T extends occurrenceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, occurrenceUpsertArgs<ExtArgs>>
    ): Prisma__occurrenceClient<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Occurrences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {occurrenceCountArgs} args - Arguments to filter Occurrences to count.
     * @example
     * // Count the number of Occurrences
     * const count = await prisma.occurrence.count({
     *   where: {
     *     // ... the filter for the Occurrences we want to count
     *   }
     * })
    **/
    count<T extends occurrenceCountArgs>(
      args?: Subset<T, occurrenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OccurrenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Occurrence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OccurrenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OccurrenceAggregateArgs>(args: Subset<T, OccurrenceAggregateArgs>): Prisma.PrismaPromise<GetOccurrenceAggregateType<T>>

    /**
     * Group by Occurrence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {occurrenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends occurrenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: occurrenceGroupByArgs['orderBy'] }
        : { orderBy?: occurrenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, occurrenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOccurrenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the occurrence model
   */
  readonly fields: occurrenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for occurrence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__occurrenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    state_list<T extends state_listDefaultArgs<ExtArgs> = {}>(args?: Subset<T, state_listDefaultArgs<ExtArgs>>): Prisma__state_listClient<$Result.GetResult<Prisma.$state_listPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user_fingerprint<T extends user_fingerprintDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_fingerprintDefaultArgs<ExtArgs>>): Prisma__user_fingerprintClient<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user_occurrences<T extends occurrence$user_occurrencesArgs<ExtArgs> = {}>(args?: Subset<T, occurrence$user_occurrencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the occurrence model
   */ 
  interface occurrenceFieldRefs {
    readonly id_occurrence: FieldRef<"occurrence", 'BigInt'>
    readonly id_user: FieldRef<"occurrence", 'BigInt'>
    readonly datetime_submission: FieldRef<"occurrence", 'DateTime'>
    readonly age_group: FieldRef<"occurrence", 'String'>
    readonly datetime_violence: FieldRef<"occurrence", 'DateTime'>
    readonly city_violence: FieldRef<"occurrence", 'String'>
    readonly state_violence: FieldRef<"occurrence", 'String'>
    readonly latitude: FieldRef<"occurrence", 'Decimal'>
    readonly longitude: FieldRef<"occurrence", 'Decimal'>
    readonly violences_options: FieldRef<"occurrence", 'String'>
    readonly violence_type: FieldRef<"occurrence", 'String'>
  }
    

  // Custom InputTypes
  /**
   * occurrence findUnique
   */
  export type occurrenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    /**
     * Filter, which occurrence to fetch.
     */
    where: occurrenceWhereUniqueInput
  }

  /**
   * occurrence findUniqueOrThrow
   */
  export type occurrenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    /**
     * Filter, which occurrence to fetch.
     */
    where: occurrenceWhereUniqueInput
  }

  /**
   * occurrence findFirst
   */
  export type occurrenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    /**
     * Filter, which occurrence to fetch.
     */
    where?: occurrenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of occurrences to fetch.
     */
    orderBy?: occurrenceOrderByWithRelationInput | occurrenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for occurrences.
     */
    cursor?: occurrenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` occurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` occurrences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of occurrences.
     */
    distinct?: OccurrenceScalarFieldEnum | OccurrenceScalarFieldEnum[]
  }

  /**
   * occurrence findFirstOrThrow
   */
  export type occurrenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    /**
     * Filter, which occurrence to fetch.
     */
    where?: occurrenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of occurrences to fetch.
     */
    orderBy?: occurrenceOrderByWithRelationInput | occurrenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for occurrences.
     */
    cursor?: occurrenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` occurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` occurrences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of occurrences.
     */
    distinct?: OccurrenceScalarFieldEnum | OccurrenceScalarFieldEnum[]
  }

  /**
   * occurrence findMany
   */
  export type occurrenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    /**
     * Filter, which occurrences to fetch.
     */
    where?: occurrenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of occurrences to fetch.
     */
    orderBy?: occurrenceOrderByWithRelationInput | occurrenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing occurrences.
     */
    cursor?: occurrenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` occurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` occurrences.
     */
    skip?: number
    distinct?: OccurrenceScalarFieldEnum | OccurrenceScalarFieldEnum[]
  }

  /**
   * occurrence create
   */
  export type occurrenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    /**
     * The data needed to create a occurrence.
     */
    data: XOR<occurrenceCreateInput, occurrenceUncheckedCreateInput>
  }

  /**
   * occurrence createMany
   */
  export type occurrenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many occurrences.
     */
    data: occurrenceCreateManyInput | occurrenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * occurrence createManyAndReturn
   */
  export type occurrenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    /**
     * The data used to create many occurrences.
     */
    data: occurrenceCreateManyInput | occurrenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * occurrence update
   */
  export type occurrenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    /**
     * The data needed to update a occurrence.
     */
    data: XOR<occurrenceUpdateInput, occurrenceUncheckedUpdateInput>
    /**
     * Choose, which occurrence to update.
     */
    where: occurrenceWhereUniqueInput
  }

  /**
   * occurrence updateMany
   */
  export type occurrenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update occurrences.
     */
    data: XOR<occurrenceUpdateManyMutationInput, occurrenceUncheckedUpdateManyInput>
    /**
     * Filter which occurrences to update
     */
    where?: occurrenceWhereInput
  }

  /**
   * occurrence upsert
   */
  export type occurrenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    /**
     * The filter to search for the occurrence to update in case it exists.
     */
    where: occurrenceWhereUniqueInput
    /**
     * In case the occurrence found by the `where` argument doesn't exist, create a new occurrence with this data.
     */
    create: XOR<occurrenceCreateInput, occurrenceUncheckedCreateInput>
    /**
     * In case the occurrence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<occurrenceUpdateInput, occurrenceUncheckedUpdateInput>
  }

  /**
   * occurrence delete
   */
  export type occurrenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    /**
     * Filter which occurrence to delete.
     */
    where: occurrenceWhereUniqueInput
  }

  /**
   * occurrence deleteMany
   */
  export type occurrenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which occurrences to delete
     */
    where?: occurrenceWhereInput
  }

  /**
   * occurrence.user_occurrences
   */
  export type occurrence$user_occurrencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    where?: user_occurrencesWhereInput
    orderBy?: user_occurrencesOrderByWithRelationInput | user_occurrencesOrderByWithRelationInput[]
    cursor?: user_occurrencesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_occurrencesScalarFieldEnum | User_occurrencesScalarFieldEnum[]
  }

  /**
   * occurrence without action
   */
  export type occurrenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
  }


  /**
   * Model state_list
   */

  export type AggregateState_list = {
    _count: State_listCountAggregateOutputType | null
    _avg: State_listAvgAggregateOutputType | null
    _sum: State_listSumAggregateOutputType | null
    _min: State_listMinAggregateOutputType | null
    _max: State_listMaxAggregateOutputType | null
  }

  export type State_listAvgAggregateOutputType = {
    id_state: number | null
    num_occurrences: number | null
  }

  export type State_listSumAggregateOutputType = {
    id_state: bigint | null
    num_occurrences: bigint | null
  }

  export type State_listMinAggregateOutputType = {
    id_state: bigint | null
    uf_state: string | null
    name_state: string | null
    num_occurrences: bigint | null
  }

  export type State_listMaxAggregateOutputType = {
    id_state: bigint | null
    uf_state: string | null
    name_state: string | null
    num_occurrences: bigint | null
  }

  export type State_listCountAggregateOutputType = {
    id_state: number
    uf_state: number
    name_state: number
    num_occurrences: number
    _all: number
  }


  export type State_listAvgAggregateInputType = {
    id_state?: true
    num_occurrences?: true
  }

  export type State_listSumAggregateInputType = {
    id_state?: true
    num_occurrences?: true
  }

  export type State_listMinAggregateInputType = {
    id_state?: true
    uf_state?: true
    name_state?: true
    num_occurrences?: true
  }

  export type State_listMaxAggregateInputType = {
    id_state?: true
    uf_state?: true
    name_state?: true
    num_occurrences?: true
  }

  export type State_listCountAggregateInputType = {
    id_state?: true
    uf_state?: true
    name_state?: true
    num_occurrences?: true
    _all?: true
  }

  export type State_listAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which state_list to aggregate.
     */
    where?: state_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of state_lists to fetch.
     */
    orderBy?: state_listOrderByWithRelationInput | state_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: state_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` state_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` state_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned state_lists
    **/
    _count?: true | State_listCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: State_listAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: State_listSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: State_listMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: State_listMaxAggregateInputType
  }

  export type GetState_listAggregateType<T extends State_listAggregateArgs> = {
        [P in keyof T & keyof AggregateState_list]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateState_list[P]>
      : GetScalarType<T[P], AggregateState_list[P]>
  }




  export type state_listGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: state_listWhereInput
    orderBy?: state_listOrderByWithAggregationInput | state_listOrderByWithAggregationInput[]
    by: State_listScalarFieldEnum[] | State_listScalarFieldEnum
    having?: state_listScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: State_listCountAggregateInputType | true
    _avg?: State_listAvgAggregateInputType
    _sum?: State_listSumAggregateInputType
    _min?: State_listMinAggregateInputType
    _max?: State_listMaxAggregateInputType
  }

  export type State_listGroupByOutputType = {
    id_state: bigint
    uf_state: string
    name_state: string
    num_occurrences: bigint | null
    _count: State_listCountAggregateOutputType | null
    _avg: State_listAvgAggregateOutputType | null
    _sum: State_listSumAggregateOutputType | null
    _min: State_listMinAggregateOutputType | null
    _max: State_listMaxAggregateOutputType | null
  }

  type GetState_listGroupByPayload<T extends state_listGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<State_listGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof State_listGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], State_listGroupByOutputType[P]>
            : GetScalarType<T[P], State_listGroupByOutputType[P]>
        }
      >
    >


  export type state_listSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_state?: boolean
    uf_state?: boolean
    name_state?: boolean
    num_occurrences?: boolean
    occurrence?: boolean | state_list$occurrenceArgs<ExtArgs>
    _count?: boolean | State_listCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["state_list"]>

  export type state_listSelectScalar = {
    id_state?: boolean
    uf_state?: boolean
    name_state?: boolean
    num_occurrences?: boolean
  }


  export type state_listInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    occurrence?: boolean | state_list$occurrenceArgs<ExtArgs>
    _count?: boolean | State_listCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $state_listPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "state_list"
    objects: {
      occurrence: Prisma.$occurrencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_state: bigint
      uf_state: string
      name_state: string
      num_occurrences: bigint | null
    }, ExtArgs["result"]["state_list"]>
    composites: {}
  }


  type state_listGetPayload<S extends boolean | null | undefined | state_listDefaultArgs> = $Result.GetResult<Prisma.$state_listPayload, S>

  type state_listCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<state_listFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: State_listCountAggregateInputType | true
    }

  export interface state_listDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['state_list'], meta: { name: 'state_list' } }
    /**
     * Find zero or one State_list that matches the filter.
     * @param {state_listFindUniqueArgs} args - Arguments to find a State_list
     * @example
     * // Get one State_list
     * const state_list = await prisma.state_list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends state_listFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, state_listFindUniqueArgs<ExtArgs>>
    ): Prisma__state_listClient<$Result.GetResult<Prisma.$state_listPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one State_list that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {state_listFindUniqueOrThrowArgs} args - Arguments to find a State_list
     * @example
     * // Get one State_list
     * const state_list = await prisma.state_list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends state_listFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, state_listFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__state_listClient<$Result.GetResult<Prisma.$state_listPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first State_list that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {state_listFindFirstArgs} args - Arguments to find a State_list
     * @example
     * // Get one State_list
     * const state_list = await prisma.state_list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends state_listFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, state_listFindFirstArgs<ExtArgs>>
    ): Prisma__state_listClient<$Result.GetResult<Prisma.$state_listPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first State_list that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {state_listFindFirstOrThrowArgs} args - Arguments to find a State_list
     * @example
     * // Get one State_list
     * const state_list = await prisma.state_list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends state_listFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, state_listFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__state_listClient<$Result.GetResult<Prisma.$state_listPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more State_lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {state_listFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all State_lists
     * const state_lists = await prisma.state_list.findMany()
     * 
     * // Get first 10 State_lists
     * const state_lists = await prisma.state_list.findMany({ take: 10 })
     * 
     * // Only select the `id_state`
     * const state_listWithId_stateOnly = await prisma.state_list.findMany({ select: { id_state: true } })
     * 
    **/
    findMany<T extends state_listFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, state_listFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$state_listPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a State_list.
     * @param {state_listCreateArgs} args - Arguments to create a State_list.
     * @example
     * // Create one State_list
     * const State_list = await prisma.state_list.create({
     *   data: {
     *     // ... data to create a State_list
     *   }
     * })
     * 
    **/
    create<T extends state_listCreateArgs<ExtArgs>>(
      args: SelectSubset<T, state_listCreateArgs<ExtArgs>>
    ): Prisma__state_listClient<$Result.GetResult<Prisma.$state_listPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many State_lists.
     * @param {state_listCreateManyArgs} args - Arguments to create many State_lists.
     * @example
     * // Create many State_lists
     * const state_list = await prisma.state_list.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends state_listCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, state_listCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many State_lists and returns the data saved in the database.
     * @param {state_listCreateManyAndReturnArgs} args - Arguments to create many State_lists.
     * @example
     * // Create many State_lists
     * const state_list = await prisma.state_list.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many State_lists and only return the `id_state`
     * const state_listWithId_stateOnly = await prisma.state_list.createManyAndReturn({ 
     *   select: { id_state: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends state_listCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, state_listCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$state_listPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a State_list.
     * @param {state_listDeleteArgs} args - Arguments to delete one State_list.
     * @example
     * // Delete one State_list
     * const State_list = await prisma.state_list.delete({
     *   where: {
     *     // ... filter to delete one State_list
     *   }
     * })
     * 
    **/
    delete<T extends state_listDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, state_listDeleteArgs<ExtArgs>>
    ): Prisma__state_listClient<$Result.GetResult<Prisma.$state_listPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one State_list.
     * @param {state_listUpdateArgs} args - Arguments to update one State_list.
     * @example
     * // Update one State_list
     * const state_list = await prisma.state_list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends state_listUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, state_listUpdateArgs<ExtArgs>>
    ): Prisma__state_listClient<$Result.GetResult<Prisma.$state_listPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more State_lists.
     * @param {state_listDeleteManyArgs} args - Arguments to filter State_lists to delete.
     * @example
     * // Delete a few State_lists
     * const { count } = await prisma.state_list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends state_listDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, state_listDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more State_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {state_listUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many State_lists
     * const state_list = await prisma.state_list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends state_listUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, state_listUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one State_list.
     * @param {state_listUpsertArgs} args - Arguments to update or create a State_list.
     * @example
     * // Update or create a State_list
     * const state_list = await prisma.state_list.upsert({
     *   create: {
     *     // ... data to create a State_list
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the State_list we want to update
     *   }
     * })
    **/
    upsert<T extends state_listUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, state_listUpsertArgs<ExtArgs>>
    ): Prisma__state_listClient<$Result.GetResult<Prisma.$state_listPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of State_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {state_listCountArgs} args - Arguments to filter State_lists to count.
     * @example
     * // Count the number of State_lists
     * const count = await prisma.state_list.count({
     *   where: {
     *     // ... the filter for the State_lists we want to count
     *   }
     * })
    **/
    count<T extends state_listCountArgs>(
      args?: Subset<T, state_listCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], State_listCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a State_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {State_listAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends State_listAggregateArgs>(args: Subset<T, State_listAggregateArgs>): Prisma.PrismaPromise<GetState_listAggregateType<T>>

    /**
     * Group by State_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {state_listGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends state_listGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: state_listGroupByArgs['orderBy'] }
        : { orderBy?: state_listGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, state_listGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetState_listGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the state_list model
   */
  readonly fields: state_listFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for state_list.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__state_listClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    occurrence<T extends state_list$occurrenceArgs<ExtArgs> = {}>(args?: Subset<T, state_list$occurrenceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the state_list model
   */ 
  interface state_listFieldRefs {
    readonly id_state: FieldRef<"state_list", 'BigInt'>
    readonly uf_state: FieldRef<"state_list", 'String'>
    readonly name_state: FieldRef<"state_list", 'String'>
    readonly num_occurrences: FieldRef<"state_list", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * state_list findUnique
   */
  export type state_listFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the state_list
     */
    select?: state_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: state_listInclude<ExtArgs> | null
    /**
     * Filter, which state_list to fetch.
     */
    where: state_listWhereUniqueInput
  }

  /**
   * state_list findUniqueOrThrow
   */
  export type state_listFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the state_list
     */
    select?: state_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: state_listInclude<ExtArgs> | null
    /**
     * Filter, which state_list to fetch.
     */
    where: state_listWhereUniqueInput
  }

  /**
   * state_list findFirst
   */
  export type state_listFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the state_list
     */
    select?: state_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: state_listInclude<ExtArgs> | null
    /**
     * Filter, which state_list to fetch.
     */
    where?: state_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of state_lists to fetch.
     */
    orderBy?: state_listOrderByWithRelationInput | state_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for state_lists.
     */
    cursor?: state_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` state_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` state_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of state_lists.
     */
    distinct?: State_listScalarFieldEnum | State_listScalarFieldEnum[]
  }

  /**
   * state_list findFirstOrThrow
   */
  export type state_listFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the state_list
     */
    select?: state_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: state_listInclude<ExtArgs> | null
    /**
     * Filter, which state_list to fetch.
     */
    where?: state_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of state_lists to fetch.
     */
    orderBy?: state_listOrderByWithRelationInput | state_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for state_lists.
     */
    cursor?: state_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` state_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` state_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of state_lists.
     */
    distinct?: State_listScalarFieldEnum | State_listScalarFieldEnum[]
  }

  /**
   * state_list findMany
   */
  export type state_listFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the state_list
     */
    select?: state_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: state_listInclude<ExtArgs> | null
    /**
     * Filter, which state_lists to fetch.
     */
    where?: state_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of state_lists to fetch.
     */
    orderBy?: state_listOrderByWithRelationInput | state_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing state_lists.
     */
    cursor?: state_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` state_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` state_lists.
     */
    skip?: number
    distinct?: State_listScalarFieldEnum | State_listScalarFieldEnum[]
  }

  /**
   * state_list create
   */
  export type state_listCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the state_list
     */
    select?: state_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: state_listInclude<ExtArgs> | null
    /**
     * The data needed to create a state_list.
     */
    data: XOR<state_listCreateInput, state_listUncheckedCreateInput>
  }

  /**
   * state_list createMany
   */
  export type state_listCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many state_lists.
     */
    data: state_listCreateManyInput | state_listCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * state_list createManyAndReturn
   */
  export type state_listCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the state_list
     */
    select?: state_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: state_listInclude<ExtArgs> | null
    /**
     * The data used to create many state_lists.
     */
    data: state_listCreateManyInput | state_listCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * state_list update
   */
  export type state_listUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the state_list
     */
    select?: state_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: state_listInclude<ExtArgs> | null
    /**
     * The data needed to update a state_list.
     */
    data: XOR<state_listUpdateInput, state_listUncheckedUpdateInput>
    /**
     * Choose, which state_list to update.
     */
    where: state_listWhereUniqueInput
  }

  /**
   * state_list updateMany
   */
  export type state_listUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update state_lists.
     */
    data: XOR<state_listUpdateManyMutationInput, state_listUncheckedUpdateManyInput>
    /**
     * Filter which state_lists to update
     */
    where?: state_listWhereInput
  }

  /**
   * state_list upsert
   */
  export type state_listUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the state_list
     */
    select?: state_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: state_listInclude<ExtArgs> | null
    /**
     * The filter to search for the state_list to update in case it exists.
     */
    where: state_listWhereUniqueInput
    /**
     * In case the state_list found by the `where` argument doesn't exist, create a new state_list with this data.
     */
    create: XOR<state_listCreateInput, state_listUncheckedCreateInput>
    /**
     * In case the state_list was found with the provided `where` argument, update it with this data.
     */
    update: XOR<state_listUpdateInput, state_listUncheckedUpdateInput>
  }

  /**
   * state_list delete
   */
  export type state_listDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the state_list
     */
    select?: state_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: state_listInclude<ExtArgs> | null
    /**
     * Filter which state_list to delete.
     */
    where: state_listWhereUniqueInput
  }

  /**
   * state_list deleteMany
   */
  export type state_listDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which state_lists to delete
     */
    where?: state_listWhereInput
  }

  /**
   * state_list.occurrence
   */
  export type state_list$occurrenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    where?: occurrenceWhereInput
    orderBy?: occurrenceOrderByWithRelationInput | occurrenceOrderByWithRelationInput[]
    cursor?: occurrenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OccurrenceScalarFieldEnum | OccurrenceScalarFieldEnum[]
  }

  /**
   * state_list without action
   */
  export type state_listDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the state_list
     */
    select?: state_listSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: state_listInclude<ExtArgs> | null
  }


  /**
   * Model types_of_violence
   */

  export type AggregateTypes_of_violence = {
    _count: Types_of_violenceCountAggregateOutputType | null
    _min: Types_of_violenceMinAggregateOutputType | null
    _max: Types_of_violenceMaxAggregateOutputType | null
  }

  export type Types_of_violenceMinAggregateOutputType = {
    id_violencetype: string | null
    description: string | null
  }

  export type Types_of_violenceMaxAggregateOutputType = {
    id_violencetype: string | null
    description: string | null
  }

  export type Types_of_violenceCountAggregateOutputType = {
    id_violencetype: number
    description: number
    _all: number
  }


  export type Types_of_violenceMinAggregateInputType = {
    id_violencetype?: true
    description?: true
  }

  export type Types_of_violenceMaxAggregateInputType = {
    id_violencetype?: true
    description?: true
  }

  export type Types_of_violenceCountAggregateInputType = {
    id_violencetype?: true
    description?: true
    _all?: true
  }

  export type Types_of_violenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which types_of_violence to aggregate.
     */
    where?: types_of_violenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of types_of_violences to fetch.
     */
    orderBy?: types_of_violenceOrderByWithRelationInput | types_of_violenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: types_of_violenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` types_of_violences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` types_of_violences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned types_of_violences
    **/
    _count?: true | Types_of_violenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Types_of_violenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Types_of_violenceMaxAggregateInputType
  }

  export type GetTypes_of_violenceAggregateType<T extends Types_of_violenceAggregateArgs> = {
        [P in keyof T & keyof AggregateTypes_of_violence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTypes_of_violence[P]>
      : GetScalarType<T[P], AggregateTypes_of_violence[P]>
  }




  export type types_of_violenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: types_of_violenceWhereInput
    orderBy?: types_of_violenceOrderByWithAggregationInput | types_of_violenceOrderByWithAggregationInput[]
    by: Types_of_violenceScalarFieldEnum[] | Types_of_violenceScalarFieldEnum
    having?: types_of_violenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Types_of_violenceCountAggregateInputType | true
    _min?: Types_of_violenceMinAggregateInputType
    _max?: Types_of_violenceMaxAggregateInputType
  }

  export type Types_of_violenceGroupByOutputType = {
    id_violencetype: string
    description: string
    _count: Types_of_violenceCountAggregateOutputType | null
    _min: Types_of_violenceMinAggregateOutputType | null
    _max: Types_of_violenceMaxAggregateOutputType | null
  }

  type GetTypes_of_violenceGroupByPayload<T extends types_of_violenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Types_of_violenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Types_of_violenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Types_of_violenceGroupByOutputType[P]>
            : GetScalarType<T[P], Types_of_violenceGroupByOutputType[P]>
        }
      >
    >


  export type types_of_violenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_violencetype?: boolean
    description?: boolean
  }, ExtArgs["result"]["types_of_violence"]>

  export type types_of_violenceSelectScalar = {
    id_violencetype?: boolean
    description?: boolean
  }



  export type $types_of_violencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "types_of_violence"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_violencetype: string
      description: string
    }, ExtArgs["result"]["types_of_violence"]>
    composites: {}
  }


  type types_of_violenceGetPayload<S extends boolean | null | undefined | types_of_violenceDefaultArgs> = $Result.GetResult<Prisma.$types_of_violencePayload, S>

  type types_of_violenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<types_of_violenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Types_of_violenceCountAggregateInputType | true
    }

  export interface types_of_violenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['types_of_violence'], meta: { name: 'types_of_violence' } }
    /**
     * Find zero or one Types_of_violence that matches the filter.
     * @param {types_of_violenceFindUniqueArgs} args - Arguments to find a Types_of_violence
     * @example
     * // Get one Types_of_violence
     * const types_of_violence = await prisma.types_of_violence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends types_of_violenceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, types_of_violenceFindUniqueArgs<ExtArgs>>
    ): Prisma__types_of_violenceClient<$Result.GetResult<Prisma.$types_of_violencePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Types_of_violence that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {types_of_violenceFindUniqueOrThrowArgs} args - Arguments to find a Types_of_violence
     * @example
     * // Get one Types_of_violence
     * const types_of_violence = await prisma.types_of_violence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends types_of_violenceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, types_of_violenceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__types_of_violenceClient<$Result.GetResult<Prisma.$types_of_violencePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Types_of_violence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {types_of_violenceFindFirstArgs} args - Arguments to find a Types_of_violence
     * @example
     * // Get one Types_of_violence
     * const types_of_violence = await prisma.types_of_violence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends types_of_violenceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, types_of_violenceFindFirstArgs<ExtArgs>>
    ): Prisma__types_of_violenceClient<$Result.GetResult<Prisma.$types_of_violencePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Types_of_violence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {types_of_violenceFindFirstOrThrowArgs} args - Arguments to find a Types_of_violence
     * @example
     * // Get one Types_of_violence
     * const types_of_violence = await prisma.types_of_violence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends types_of_violenceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, types_of_violenceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__types_of_violenceClient<$Result.GetResult<Prisma.$types_of_violencePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Types_of_violences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {types_of_violenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Types_of_violences
     * const types_of_violences = await prisma.types_of_violence.findMany()
     * 
     * // Get first 10 Types_of_violences
     * const types_of_violences = await prisma.types_of_violence.findMany({ take: 10 })
     * 
     * // Only select the `id_violencetype`
     * const types_of_violenceWithId_violencetypeOnly = await prisma.types_of_violence.findMany({ select: { id_violencetype: true } })
     * 
    **/
    findMany<T extends types_of_violenceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, types_of_violenceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$types_of_violencePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Types_of_violence.
     * @param {types_of_violenceCreateArgs} args - Arguments to create a Types_of_violence.
     * @example
     * // Create one Types_of_violence
     * const Types_of_violence = await prisma.types_of_violence.create({
     *   data: {
     *     // ... data to create a Types_of_violence
     *   }
     * })
     * 
    **/
    create<T extends types_of_violenceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, types_of_violenceCreateArgs<ExtArgs>>
    ): Prisma__types_of_violenceClient<$Result.GetResult<Prisma.$types_of_violencePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Types_of_violences.
     * @param {types_of_violenceCreateManyArgs} args - Arguments to create many Types_of_violences.
     * @example
     * // Create many Types_of_violences
     * const types_of_violence = await prisma.types_of_violence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends types_of_violenceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, types_of_violenceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Types_of_violences and returns the data saved in the database.
     * @param {types_of_violenceCreateManyAndReturnArgs} args - Arguments to create many Types_of_violences.
     * @example
     * // Create many Types_of_violences
     * const types_of_violence = await prisma.types_of_violence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Types_of_violences and only return the `id_violencetype`
     * const types_of_violenceWithId_violencetypeOnly = await prisma.types_of_violence.createManyAndReturn({ 
     *   select: { id_violencetype: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends types_of_violenceCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, types_of_violenceCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$types_of_violencePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Types_of_violence.
     * @param {types_of_violenceDeleteArgs} args - Arguments to delete one Types_of_violence.
     * @example
     * // Delete one Types_of_violence
     * const Types_of_violence = await prisma.types_of_violence.delete({
     *   where: {
     *     // ... filter to delete one Types_of_violence
     *   }
     * })
     * 
    **/
    delete<T extends types_of_violenceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, types_of_violenceDeleteArgs<ExtArgs>>
    ): Prisma__types_of_violenceClient<$Result.GetResult<Prisma.$types_of_violencePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Types_of_violence.
     * @param {types_of_violenceUpdateArgs} args - Arguments to update one Types_of_violence.
     * @example
     * // Update one Types_of_violence
     * const types_of_violence = await prisma.types_of_violence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends types_of_violenceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, types_of_violenceUpdateArgs<ExtArgs>>
    ): Prisma__types_of_violenceClient<$Result.GetResult<Prisma.$types_of_violencePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Types_of_violences.
     * @param {types_of_violenceDeleteManyArgs} args - Arguments to filter Types_of_violences to delete.
     * @example
     * // Delete a few Types_of_violences
     * const { count } = await prisma.types_of_violence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends types_of_violenceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, types_of_violenceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Types_of_violences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {types_of_violenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Types_of_violences
     * const types_of_violence = await prisma.types_of_violence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends types_of_violenceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, types_of_violenceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Types_of_violence.
     * @param {types_of_violenceUpsertArgs} args - Arguments to update or create a Types_of_violence.
     * @example
     * // Update or create a Types_of_violence
     * const types_of_violence = await prisma.types_of_violence.upsert({
     *   create: {
     *     // ... data to create a Types_of_violence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Types_of_violence we want to update
     *   }
     * })
    **/
    upsert<T extends types_of_violenceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, types_of_violenceUpsertArgs<ExtArgs>>
    ): Prisma__types_of_violenceClient<$Result.GetResult<Prisma.$types_of_violencePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Types_of_violences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {types_of_violenceCountArgs} args - Arguments to filter Types_of_violences to count.
     * @example
     * // Count the number of Types_of_violences
     * const count = await prisma.types_of_violence.count({
     *   where: {
     *     // ... the filter for the Types_of_violences we want to count
     *   }
     * })
    **/
    count<T extends types_of_violenceCountArgs>(
      args?: Subset<T, types_of_violenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Types_of_violenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Types_of_violence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Types_of_violenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Types_of_violenceAggregateArgs>(args: Subset<T, Types_of_violenceAggregateArgs>): Prisma.PrismaPromise<GetTypes_of_violenceAggregateType<T>>

    /**
     * Group by Types_of_violence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {types_of_violenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends types_of_violenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: types_of_violenceGroupByArgs['orderBy'] }
        : { orderBy?: types_of_violenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, types_of_violenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypes_of_violenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the types_of_violence model
   */
  readonly fields: types_of_violenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for types_of_violence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__types_of_violenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the types_of_violence model
   */ 
  interface types_of_violenceFieldRefs {
    readonly id_violencetype: FieldRef<"types_of_violence", 'String'>
    readonly description: FieldRef<"types_of_violence", 'String'>
  }
    

  // Custom InputTypes
  /**
   * types_of_violence findUnique
   */
  export type types_of_violenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the types_of_violence
     */
    select?: types_of_violenceSelect<ExtArgs> | null
    /**
     * Filter, which types_of_violence to fetch.
     */
    where: types_of_violenceWhereUniqueInput
  }

  /**
   * types_of_violence findUniqueOrThrow
   */
  export type types_of_violenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the types_of_violence
     */
    select?: types_of_violenceSelect<ExtArgs> | null
    /**
     * Filter, which types_of_violence to fetch.
     */
    where: types_of_violenceWhereUniqueInput
  }

  /**
   * types_of_violence findFirst
   */
  export type types_of_violenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the types_of_violence
     */
    select?: types_of_violenceSelect<ExtArgs> | null
    /**
     * Filter, which types_of_violence to fetch.
     */
    where?: types_of_violenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of types_of_violences to fetch.
     */
    orderBy?: types_of_violenceOrderByWithRelationInput | types_of_violenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for types_of_violences.
     */
    cursor?: types_of_violenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` types_of_violences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` types_of_violences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of types_of_violences.
     */
    distinct?: Types_of_violenceScalarFieldEnum | Types_of_violenceScalarFieldEnum[]
  }

  /**
   * types_of_violence findFirstOrThrow
   */
  export type types_of_violenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the types_of_violence
     */
    select?: types_of_violenceSelect<ExtArgs> | null
    /**
     * Filter, which types_of_violence to fetch.
     */
    where?: types_of_violenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of types_of_violences to fetch.
     */
    orderBy?: types_of_violenceOrderByWithRelationInput | types_of_violenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for types_of_violences.
     */
    cursor?: types_of_violenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` types_of_violences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` types_of_violences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of types_of_violences.
     */
    distinct?: Types_of_violenceScalarFieldEnum | Types_of_violenceScalarFieldEnum[]
  }

  /**
   * types_of_violence findMany
   */
  export type types_of_violenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the types_of_violence
     */
    select?: types_of_violenceSelect<ExtArgs> | null
    /**
     * Filter, which types_of_violences to fetch.
     */
    where?: types_of_violenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of types_of_violences to fetch.
     */
    orderBy?: types_of_violenceOrderByWithRelationInput | types_of_violenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing types_of_violences.
     */
    cursor?: types_of_violenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` types_of_violences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` types_of_violences.
     */
    skip?: number
    distinct?: Types_of_violenceScalarFieldEnum | Types_of_violenceScalarFieldEnum[]
  }

  /**
   * types_of_violence create
   */
  export type types_of_violenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the types_of_violence
     */
    select?: types_of_violenceSelect<ExtArgs> | null
    /**
     * The data needed to create a types_of_violence.
     */
    data: XOR<types_of_violenceCreateInput, types_of_violenceUncheckedCreateInput>
  }

  /**
   * types_of_violence createMany
   */
  export type types_of_violenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many types_of_violences.
     */
    data: types_of_violenceCreateManyInput | types_of_violenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * types_of_violence createManyAndReturn
   */
  export type types_of_violenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the types_of_violence
     */
    select?: types_of_violenceSelect<ExtArgs> | null
    /**
     * The data used to create many types_of_violences.
     */
    data: types_of_violenceCreateManyInput | types_of_violenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * types_of_violence update
   */
  export type types_of_violenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the types_of_violence
     */
    select?: types_of_violenceSelect<ExtArgs> | null
    /**
     * The data needed to update a types_of_violence.
     */
    data: XOR<types_of_violenceUpdateInput, types_of_violenceUncheckedUpdateInput>
    /**
     * Choose, which types_of_violence to update.
     */
    where: types_of_violenceWhereUniqueInput
  }

  /**
   * types_of_violence updateMany
   */
  export type types_of_violenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update types_of_violences.
     */
    data: XOR<types_of_violenceUpdateManyMutationInput, types_of_violenceUncheckedUpdateManyInput>
    /**
     * Filter which types_of_violences to update
     */
    where?: types_of_violenceWhereInput
  }

  /**
   * types_of_violence upsert
   */
  export type types_of_violenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the types_of_violence
     */
    select?: types_of_violenceSelect<ExtArgs> | null
    /**
     * The filter to search for the types_of_violence to update in case it exists.
     */
    where: types_of_violenceWhereUniqueInput
    /**
     * In case the types_of_violence found by the `where` argument doesn't exist, create a new types_of_violence with this data.
     */
    create: XOR<types_of_violenceCreateInput, types_of_violenceUncheckedCreateInput>
    /**
     * In case the types_of_violence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<types_of_violenceUpdateInput, types_of_violenceUncheckedUpdateInput>
  }

  /**
   * types_of_violence delete
   */
  export type types_of_violenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the types_of_violence
     */
    select?: types_of_violenceSelect<ExtArgs> | null
    /**
     * Filter which types_of_violence to delete.
     */
    where: types_of_violenceWhereUniqueInput
  }

  /**
   * types_of_violence deleteMany
   */
  export type types_of_violenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which types_of_violences to delete
     */
    where?: types_of_violenceWhereInput
  }

  /**
   * types_of_violence without action
   */
  export type types_of_violenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the types_of_violence
     */
    select?: types_of_violenceSelect<ExtArgs> | null
  }


  /**
   * Model user_fingerprint
   */

  export type AggregateUser_fingerprint = {
    _count: User_fingerprintCountAggregateOutputType | null
    _avg: User_fingerprintAvgAggregateOutputType | null
    _sum: User_fingerprintSumAggregateOutputType | null
    _min: User_fingerprintMinAggregateOutputType | null
    _max: User_fingerprintMaxAggregateOutputType | null
  }

  export type User_fingerprintAvgAggregateOutputType = {
    id_user: number | null
  }

  export type User_fingerprintSumAggregateOutputType = {
    id_user: bigint | null
  }

  export type User_fingerprintMinAggregateOutputType = {
    id_user: bigint | null
    fingerprint: string | null
  }

  export type User_fingerprintMaxAggregateOutputType = {
    id_user: bigint | null
    fingerprint: string | null
  }

  export type User_fingerprintCountAggregateOutputType = {
    id_user: number
    fingerprint: number
    _all: number
  }


  export type User_fingerprintAvgAggregateInputType = {
    id_user?: true
  }

  export type User_fingerprintSumAggregateInputType = {
    id_user?: true
  }

  export type User_fingerprintMinAggregateInputType = {
    id_user?: true
    fingerprint?: true
  }

  export type User_fingerprintMaxAggregateInputType = {
    id_user?: true
    fingerprint?: true
  }

  export type User_fingerprintCountAggregateInputType = {
    id_user?: true
    fingerprint?: true
    _all?: true
  }

  export type User_fingerprintAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_fingerprint to aggregate.
     */
    where?: user_fingerprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_fingerprints to fetch.
     */
    orderBy?: user_fingerprintOrderByWithRelationInput | user_fingerprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_fingerprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_fingerprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_fingerprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_fingerprints
    **/
    _count?: true | User_fingerprintCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_fingerprintAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_fingerprintSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_fingerprintMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_fingerprintMaxAggregateInputType
  }

  export type GetUser_fingerprintAggregateType<T extends User_fingerprintAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_fingerprint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_fingerprint[P]>
      : GetScalarType<T[P], AggregateUser_fingerprint[P]>
  }




  export type user_fingerprintGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_fingerprintWhereInput
    orderBy?: user_fingerprintOrderByWithAggregationInput | user_fingerprintOrderByWithAggregationInput[]
    by: User_fingerprintScalarFieldEnum[] | User_fingerprintScalarFieldEnum
    having?: user_fingerprintScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_fingerprintCountAggregateInputType | true
    _avg?: User_fingerprintAvgAggregateInputType
    _sum?: User_fingerprintSumAggregateInputType
    _min?: User_fingerprintMinAggregateInputType
    _max?: User_fingerprintMaxAggregateInputType
  }

  export type User_fingerprintGroupByOutputType = {
    id_user: bigint
    fingerprint: string
    _count: User_fingerprintCountAggregateOutputType | null
    _avg: User_fingerprintAvgAggregateOutputType | null
    _sum: User_fingerprintSumAggregateOutputType | null
    _min: User_fingerprintMinAggregateOutputType | null
    _max: User_fingerprintMaxAggregateOutputType | null
  }

  type GetUser_fingerprintGroupByPayload<T extends user_fingerprintGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_fingerprintGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_fingerprintGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_fingerprintGroupByOutputType[P]>
            : GetScalarType<T[P], User_fingerprintGroupByOutputType[P]>
        }
      >
    >


  export type user_fingerprintSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_user?: boolean
    fingerprint?: boolean
    user_occurrences?: boolean | user_fingerprint$user_occurrencesArgs<ExtArgs>
    occurrence?: boolean | user_fingerprint$occurrenceArgs<ExtArgs>
    _count?: boolean | User_fingerprintCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_fingerprint"]>

  export type user_fingerprintSelectScalar = {
    id_user?: boolean
    fingerprint?: boolean
  }


  export type user_fingerprintInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_occurrences?: boolean | user_fingerprint$user_occurrencesArgs<ExtArgs>
    occurrence?: boolean | user_fingerprint$occurrenceArgs<ExtArgs>
    _count?: boolean | User_fingerprintCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $user_fingerprintPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_fingerprint"
    objects: {
      user_occurrences: Prisma.$user_occurrencesPayload<ExtArgs>[]
      occurrence: Prisma.$occurrencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_user: bigint
      fingerprint: string
    }, ExtArgs["result"]["user_fingerprint"]>
    composites: {}
  }


  type user_fingerprintGetPayload<S extends boolean | null | undefined | user_fingerprintDefaultArgs> = $Result.GetResult<Prisma.$user_fingerprintPayload, S>

  type user_fingerprintCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_fingerprintFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_fingerprintCountAggregateInputType | true
    }

  export interface user_fingerprintDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_fingerprint'], meta: { name: 'user_fingerprint' } }
    /**
     * Find zero or one User_fingerprint that matches the filter.
     * @param {user_fingerprintFindUniqueArgs} args - Arguments to find a User_fingerprint
     * @example
     * // Get one User_fingerprint
     * const user_fingerprint = await prisma.user_fingerprint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_fingerprintFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, user_fingerprintFindUniqueArgs<ExtArgs>>
    ): Prisma__user_fingerprintClient<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User_fingerprint that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {user_fingerprintFindUniqueOrThrowArgs} args - Arguments to find a User_fingerprint
     * @example
     * // Get one User_fingerprint
     * const user_fingerprint = await prisma.user_fingerprint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_fingerprintFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_fingerprintFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__user_fingerprintClient<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User_fingerprint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_fingerprintFindFirstArgs} args - Arguments to find a User_fingerprint
     * @example
     * // Get one User_fingerprint
     * const user_fingerprint = await prisma.user_fingerprint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_fingerprintFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, user_fingerprintFindFirstArgs<ExtArgs>>
    ): Prisma__user_fingerprintClient<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User_fingerprint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_fingerprintFindFirstOrThrowArgs} args - Arguments to find a User_fingerprint
     * @example
     * // Get one User_fingerprint
     * const user_fingerprint = await prisma.user_fingerprint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_fingerprintFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_fingerprintFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__user_fingerprintClient<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more User_fingerprints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_fingerprintFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_fingerprints
     * const user_fingerprints = await prisma.user_fingerprint.findMany()
     * 
     * // Get first 10 User_fingerprints
     * const user_fingerprints = await prisma.user_fingerprint.findMany({ take: 10 })
     * 
     * // Only select the `id_user`
     * const user_fingerprintWithId_userOnly = await prisma.user_fingerprint.findMany({ select: { id_user: true } })
     * 
    **/
    findMany<T extends user_fingerprintFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_fingerprintFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User_fingerprint.
     * @param {user_fingerprintCreateArgs} args - Arguments to create a User_fingerprint.
     * @example
     * // Create one User_fingerprint
     * const User_fingerprint = await prisma.user_fingerprint.create({
     *   data: {
     *     // ... data to create a User_fingerprint
     *   }
     * })
     * 
    **/
    create<T extends user_fingerprintCreateArgs<ExtArgs>>(
      args: SelectSubset<T, user_fingerprintCreateArgs<ExtArgs>>
    ): Prisma__user_fingerprintClient<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many User_fingerprints.
     * @param {user_fingerprintCreateManyArgs} args - Arguments to create many User_fingerprints.
     * @example
     * // Create many User_fingerprints
     * const user_fingerprint = await prisma.user_fingerprint.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends user_fingerprintCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_fingerprintCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_fingerprints and returns the data saved in the database.
     * @param {user_fingerprintCreateManyAndReturnArgs} args - Arguments to create many User_fingerprints.
     * @example
     * // Create many User_fingerprints
     * const user_fingerprint = await prisma.user_fingerprint.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_fingerprints and only return the `id_user`
     * const user_fingerprintWithId_userOnly = await prisma.user_fingerprint.createManyAndReturn({ 
     *   select: { id_user: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends user_fingerprintCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, user_fingerprintCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User_fingerprint.
     * @param {user_fingerprintDeleteArgs} args - Arguments to delete one User_fingerprint.
     * @example
     * // Delete one User_fingerprint
     * const User_fingerprint = await prisma.user_fingerprint.delete({
     *   where: {
     *     // ... filter to delete one User_fingerprint
     *   }
     * })
     * 
    **/
    delete<T extends user_fingerprintDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, user_fingerprintDeleteArgs<ExtArgs>>
    ): Prisma__user_fingerprintClient<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User_fingerprint.
     * @param {user_fingerprintUpdateArgs} args - Arguments to update one User_fingerprint.
     * @example
     * // Update one User_fingerprint
     * const user_fingerprint = await prisma.user_fingerprint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_fingerprintUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, user_fingerprintUpdateArgs<ExtArgs>>
    ): Prisma__user_fingerprintClient<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more User_fingerprints.
     * @param {user_fingerprintDeleteManyArgs} args - Arguments to filter User_fingerprints to delete.
     * @example
     * // Delete a few User_fingerprints
     * const { count } = await prisma.user_fingerprint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_fingerprintDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_fingerprintDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_fingerprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_fingerprintUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_fingerprints
     * const user_fingerprint = await prisma.user_fingerprint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_fingerprintUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, user_fingerprintUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_fingerprint.
     * @param {user_fingerprintUpsertArgs} args - Arguments to update or create a User_fingerprint.
     * @example
     * // Update or create a User_fingerprint
     * const user_fingerprint = await prisma.user_fingerprint.upsert({
     *   create: {
     *     // ... data to create a User_fingerprint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_fingerprint we want to update
     *   }
     * })
    **/
    upsert<T extends user_fingerprintUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, user_fingerprintUpsertArgs<ExtArgs>>
    ): Prisma__user_fingerprintClient<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of User_fingerprints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_fingerprintCountArgs} args - Arguments to filter User_fingerprints to count.
     * @example
     * // Count the number of User_fingerprints
     * const count = await prisma.user_fingerprint.count({
     *   where: {
     *     // ... the filter for the User_fingerprints we want to count
     *   }
     * })
    **/
    count<T extends user_fingerprintCountArgs>(
      args?: Subset<T, user_fingerprintCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_fingerprintCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_fingerprint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_fingerprintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_fingerprintAggregateArgs>(args: Subset<T, User_fingerprintAggregateArgs>): Prisma.PrismaPromise<GetUser_fingerprintAggregateType<T>>

    /**
     * Group by User_fingerprint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_fingerprintGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_fingerprintGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_fingerprintGroupByArgs['orderBy'] }
        : { orderBy?: user_fingerprintGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_fingerprintGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_fingerprintGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_fingerprint model
   */
  readonly fields: user_fingerprintFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_fingerprint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_fingerprintClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user_occurrences<T extends user_fingerprint$user_occurrencesArgs<ExtArgs> = {}>(args?: Subset<T, user_fingerprint$user_occurrencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'findMany'> | Null>;

    occurrence<T extends user_fingerprint$occurrenceArgs<ExtArgs> = {}>(args?: Subset<T, user_fingerprint$occurrenceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user_fingerprint model
   */ 
  interface user_fingerprintFieldRefs {
    readonly id_user: FieldRef<"user_fingerprint", 'BigInt'>
    readonly fingerprint: FieldRef<"user_fingerprint", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user_fingerprint findUnique
   */
  export type user_fingerprintFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_fingerprint
     */
    select?: user_fingerprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_fingerprintInclude<ExtArgs> | null
    /**
     * Filter, which user_fingerprint to fetch.
     */
    where: user_fingerprintWhereUniqueInput
  }

  /**
   * user_fingerprint findUniqueOrThrow
   */
  export type user_fingerprintFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_fingerprint
     */
    select?: user_fingerprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_fingerprintInclude<ExtArgs> | null
    /**
     * Filter, which user_fingerprint to fetch.
     */
    where: user_fingerprintWhereUniqueInput
  }

  /**
   * user_fingerprint findFirst
   */
  export type user_fingerprintFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_fingerprint
     */
    select?: user_fingerprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_fingerprintInclude<ExtArgs> | null
    /**
     * Filter, which user_fingerprint to fetch.
     */
    where?: user_fingerprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_fingerprints to fetch.
     */
    orderBy?: user_fingerprintOrderByWithRelationInput | user_fingerprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_fingerprints.
     */
    cursor?: user_fingerprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_fingerprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_fingerprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_fingerprints.
     */
    distinct?: User_fingerprintScalarFieldEnum | User_fingerprintScalarFieldEnum[]
  }

  /**
   * user_fingerprint findFirstOrThrow
   */
  export type user_fingerprintFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_fingerprint
     */
    select?: user_fingerprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_fingerprintInclude<ExtArgs> | null
    /**
     * Filter, which user_fingerprint to fetch.
     */
    where?: user_fingerprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_fingerprints to fetch.
     */
    orderBy?: user_fingerprintOrderByWithRelationInput | user_fingerprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_fingerprints.
     */
    cursor?: user_fingerprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_fingerprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_fingerprints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_fingerprints.
     */
    distinct?: User_fingerprintScalarFieldEnum | User_fingerprintScalarFieldEnum[]
  }

  /**
   * user_fingerprint findMany
   */
  export type user_fingerprintFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_fingerprint
     */
    select?: user_fingerprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_fingerprintInclude<ExtArgs> | null
    /**
     * Filter, which user_fingerprints to fetch.
     */
    where?: user_fingerprintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_fingerprints to fetch.
     */
    orderBy?: user_fingerprintOrderByWithRelationInput | user_fingerprintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_fingerprints.
     */
    cursor?: user_fingerprintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_fingerprints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_fingerprints.
     */
    skip?: number
    distinct?: User_fingerprintScalarFieldEnum | User_fingerprintScalarFieldEnum[]
  }

  /**
   * user_fingerprint create
   */
  export type user_fingerprintCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_fingerprint
     */
    select?: user_fingerprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_fingerprintInclude<ExtArgs> | null
    /**
     * The data needed to create a user_fingerprint.
     */
    data: XOR<user_fingerprintCreateInput, user_fingerprintUncheckedCreateInput>
  }

  /**
   * user_fingerprint createMany
   */
  export type user_fingerprintCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_fingerprints.
     */
    data: user_fingerprintCreateManyInput | user_fingerprintCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_fingerprint createManyAndReturn
   */
  export type user_fingerprintCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_fingerprint
     */
    select?: user_fingerprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_fingerprintInclude<ExtArgs> | null
    /**
     * The data used to create many user_fingerprints.
     */
    data: user_fingerprintCreateManyInput | user_fingerprintCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_fingerprint update
   */
  export type user_fingerprintUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_fingerprint
     */
    select?: user_fingerprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_fingerprintInclude<ExtArgs> | null
    /**
     * The data needed to update a user_fingerprint.
     */
    data: XOR<user_fingerprintUpdateInput, user_fingerprintUncheckedUpdateInput>
    /**
     * Choose, which user_fingerprint to update.
     */
    where: user_fingerprintWhereUniqueInput
  }

  /**
   * user_fingerprint updateMany
   */
  export type user_fingerprintUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_fingerprints.
     */
    data: XOR<user_fingerprintUpdateManyMutationInput, user_fingerprintUncheckedUpdateManyInput>
    /**
     * Filter which user_fingerprints to update
     */
    where?: user_fingerprintWhereInput
  }

  /**
   * user_fingerprint upsert
   */
  export type user_fingerprintUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_fingerprint
     */
    select?: user_fingerprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_fingerprintInclude<ExtArgs> | null
    /**
     * The filter to search for the user_fingerprint to update in case it exists.
     */
    where: user_fingerprintWhereUniqueInput
    /**
     * In case the user_fingerprint found by the `where` argument doesn't exist, create a new user_fingerprint with this data.
     */
    create: XOR<user_fingerprintCreateInput, user_fingerprintUncheckedCreateInput>
    /**
     * In case the user_fingerprint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_fingerprintUpdateInput, user_fingerprintUncheckedUpdateInput>
  }

  /**
   * user_fingerprint delete
   */
  export type user_fingerprintDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_fingerprint
     */
    select?: user_fingerprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_fingerprintInclude<ExtArgs> | null
    /**
     * Filter which user_fingerprint to delete.
     */
    where: user_fingerprintWhereUniqueInput
  }

  /**
   * user_fingerprint deleteMany
   */
  export type user_fingerprintDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_fingerprints to delete
     */
    where?: user_fingerprintWhereInput
  }

  /**
   * user_fingerprint.user_occurrences
   */
  export type user_fingerprint$user_occurrencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    where?: user_occurrencesWhereInput
    orderBy?: user_occurrencesOrderByWithRelationInput | user_occurrencesOrderByWithRelationInput[]
    cursor?: user_occurrencesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_occurrencesScalarFieldEnum | User_occurrencesScalarFieldEnum[]
  }

  /**
   * user_fingerprint.occurrence
   */
  export type user_fingerprint$occurrenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the occurrence
     */
    select?: occurrenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: occurrenceInclude<ExtArgs> | null
    where?: occurrenceWhereInput
    orderBy?: occurrenceOrderByWithRelationInput | occurrenceOrderByWithRelationInput[]
    cursor?: occurrenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OccurrenceScalarFieldEnum | OccurrenceScalarFieldEnum[]
  }

  /**
   * user_fingerprint without action
   */
  export type user_fingerprintDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_fingerprint
     */
    select?: user_fingerprintSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_fingerprintInclude<ExtArgs> | null
  }


  /**
   * Model user_occurrences
   */

  export type AggregateUser_occurrences = {
    _count: User_occurrencesCountAggregateOutputType | null
    _avg: User_occurrencesAvgAggregateOutputType | null
    _sum: User_occurrencesSumAggregateOutputType | null
    _min: User_occurrencesMinAggregateOutputType | null
    _max: User_occurrencesMaxAggregateOutputType | null
  }

  export type User_occurrencesAvgAggregateOutputType = {
    id_occurrence: number | null
    id_user: number | null
  }

  export type User_occurrencesSumAggregateOutputType = {
    id_occurrence: bigint | null
    id_user: bigint | null
  }

  export type User_occurrencesMinAggregateOutputType = {
    id_occurrence: bigint | null
    datetime_violence: Date | null
    id_user: bigint | null
  }

  export type User_occurrencesMaxAggregateOutputType = {
    id_occurrence: bigint | null
    datetime_violence: Date | null
    id_user: bigint | null
  }

  export type User_occurrencesCountAggregateOutputType = {
    id_occurrence: number
    datetime_violence: number
    id_user: number
    _all: number
  }


  export type User_occurrencesAvgAggregateInputType = {
    id_occurrence?: true
    id_user?: true
  }

  export type User_occurrencesSumAggregateInputType = {
    id_occurrence?: true
    id_user?: true
  }

  export type User_occurrencesMinAggregateInputType = {
    id_occurrence?: true
    datetime_violence?: true
    id_user?: true
  }

  export type User_occurrencesMaxAggregateInputType = {
    id_occurrence?: true
    datetime_violence?: true
    id_user?: true
  }

  export type User_occurrencesCountAggregateInputType = {
    id_occurrence?: true
    datetime_violence?: true
    id_user?: true
    _all?: true
  }

  export type User_occurrencesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_occurrences to aggregate.
     */
    where?: user_occurrencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_occurrences to fetch.
     */
    orderBy?: user_occurrencesOrderByWithRelationInput | user_occurrencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_occurrencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_occurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_occurrences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_occurrences
    **/
    _count?: true | User_occurrencesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_occurrencesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_occurrencesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_occurrencesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_occurrencesMaxAggregateInputType
  }

  export type GetUser_occurrencesAggregateType<T extends User_occurrencesAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_occurrences]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_occurrences[P]>
      : GetScalarType<T[P], AggregateUser_occurrences[P]>
  }




  export type user_occurrencesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_occurrencesWhereInput
    orderBy?: user_occurrencesOrderByWithAggregationInput | user_occurrencesOrderByWithAggregationInput[]
    by: User_occurrencesScalarFieldEnum[] | User_occurrencesScalarFieldEnum
    having?: user_occurrencesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_occurrencesCountAggregateInputType | true
    _avg?: User_occurrencesAvgAggregateInputType
    _sum?: User_occurrencesSumAggregateInputType
    _min?: User_occurrencesMinAggregateInputType
    _max?: User_occurrencesMaxAggregateInputType
  }

  export type User_occurrencesGroupByOutputType = {
    id_occurrence: bigint
    datetime_violence: Date
    id_user: bigint
    _count: User_occurrencesCountAggregateOutputType | null
    _avg: User_occurrencesAvgAggregateOutputType | null
    _sum: User_occurrencesSumAggregateOutputType | null
    _min: User_occurrencesMinAggregateOutputType | null
    _max: User_occurrencesMaxAggregateOutputType | null
  }

  type GetUser_occurrencesGroupByPayload<T extends user_occurrencesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_occurrencesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_occurrencesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_occurrencesGroupByOutputType[P]>
            : GetScalarType<T[P], User_occurrencesGroupByOutputType[P]>
        }
      >
    >


  export type user_occurrencesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_occurrence?: boolean
    datetime_violence?: boolean
    id_user?: boolean
    occurrence?: boolean | occurrenceDefaultArgs<ExtArgs>
    user_fingerprint?: boolean | user_fingerprintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_occurrences"]>

  export type user_occurrencesSelectScalar = {
    id_occurrence?: boolean
    datetime_violence?: boolean
    id_user?: boolean
  }


  export type user_occurrencesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    occurrence?: boolean | occurrenceDefaultArgs<ExtArgs>
    user_fingerprint?: boolean | user_fingerprintDefaultArgs<ExtArgs>
  }


  export type $user_occurrencesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_occurrences"
    objects: {
      occurrence: Prisma.$occurrencePayload<ExtArgs>
      user_fingerprint: Prisma.$user_fingerprintPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_occurrence: bigint
      datetime_violence: Date
      id_user: bigint
    }, ExtArgs["result"]["user_occurrences"]>
    composites: {}
  }


  type user_occurrencesGetPayload<S extends boolean | null | undefined | user_occurrencesDefaultArgs> = $Result.GetResult<Prisma.$user_occurrencesPayload, S>

  type user_occurrencesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_occurrencesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_occurrencesCountAggregateInputType | true
    }

  export interface user_occurrencesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_occurrences'], meta: { name: 'user_occurrences' } }
    /**
     * Find zero or one User_occurrences that matches the filter.
     * @param {user_occurrencesFindUniqueArgs} args - Arguments to find a User_occurrences
     * @example
     * // Get one User_occurrences
     * const user_occurrences = await prisma.user_occurrences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_occurrencesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, user_occurrencesFindUniqueArgs<ExtArgs>>
    ): Prisma__user_occurrencesClient<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User_occurrences that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {user_occurrencesFindUniqueOrThrowArgs} args - Arguments to find a User_occurrences
     * @example
     * // Get one User_occurrences
     * const user_occurrences = await prisma.user_occurrences.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_occurrencesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_occurrencesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__user_occurrencesClient<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User_occurrences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_occurrencesFindFirstArgs} args - Arguments to find a User_occurrences
     * @example
     * // Get one User_occurrences
     * const user_occurrences = await prisma.user_occurrences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_occurrencesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, user_occurrencesFindFirstArgs<ExtArgs>>
    ): Prisma__user_occurrencesClient<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User_occurrences that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_occurrencesFindFirstOrThrowArgs} args - Arguments to find a User_occurrences
     * @example
     * // Get one User_occurrences
     * const user_occurrences = await prisma.user_occurrences.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_occurrencesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, user_occurrencesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__user_occurrencesClient<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more User_occurrences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_occurrencesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_occurrences
     * const user_occurrences = await prisma.user_occurrences.findMany()
     * 
     * // Get first 10 User_occurrences
     * const user_occurrences = await prisma.user_occurrences.findMany({ take: 10 })
     * 
     * // Only select the `id_occurrence`
     * const user_occurrencesWithId_occurrenceOnly = await prisma.user_occurrences.findMany({ select: { id_occurrence: true } })
     * 
    **/
    findMany<T extends user_occurrencesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_occurrencesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User_occurrences.
     * @param {user_occurrencesCreateArgs} args - Arguments to create a User_occurrences.
     * @example
     * // Create one User_occurrences
     * const User_occurrences = await prisma.user_occurrences.create({
     *   data: {
     *     // ... data to create a User_occurrences
     *   }
     * })
     * 
    **/
    create<T extends user_occurrencesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, user_occurrencesCreateArgs<ExtArgs>>
    ): Prisma__user_occurrencesClient<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many User_occurrences.
     * @param {user_occurrencesCreateManyArgs} args - Arguments to create many User_occurrences.
     * @example
     * // Create many User_occurrences
     * const user_occurrences = await prisma.user_occurrences.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends user_occurrencesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_occurrencesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_occurrences and returns the data saved in the database.
     * @param {user_occurrencesCreateManyAndReturnArgs} args - Arguments to create many User_occurrences.
     * @example
     * // Create many User_occurrences
     * const user_occurrences = await prisma.user_occurrences.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_occurrences and only return the `id_occurrence`
     * const user_occurrencesWithId_occurrenceOnly = await prisma.user_occurrences.createManyAndReturn({ 
     *   select: { id_occurrence: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends user_occurrencesCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, user_occurrencesCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User_occurrences.
     * @param {user_occurrencesDeleteArgs} args - Arguments to delete one User_occurrences.
     * @example
     * // Delete one User_occurrences
     * const User_occurrences = await prisma.user_occurrences.delete({
     *   where: {
     *     // ... filter to delete one User_occurrences
     *   }
     * })
     * 
    **/
    delete<T extends user_occurrencesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, user_occurrencesDeleteArgs<ExtArgs>>
    ): Prisma__user_occurrencesClient<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User_occurrences.
     * @param {user_occurrencesUpdateArgs} args - Arguments to update one User_occurrences.
     * @example
     * // Update one User_occurrences
     * const user_occurrences = await prisma.user_occurrences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_occurrencesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, user_occurrencesUpdateArgs<ExtArgs>>
    ): Prisma__user_occurrencesClient<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more User_occurrences.
     * @param {user_occurrencesDeleteManyArgs} args - Arguments to filter User_occurrences to delete.
     * @example
     * // Delete a few User_occurrences
     * const { count } = await prisma.user_occurrences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_occurrencesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, user_occurrencesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_occurrences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_occurrencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_occurrences
     * const user_occurrences = await prisma.user_occurrences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_occurrencesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, user_occurrencesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_occurrences.
     * @param {user_occurrencesUpsertArgs} args - Arguments to update or create a User_occurrences.
     * @example
     * // Update or create a User_occurrences
     * const user_occurrences = await prisma.user_occurrences.upsert({
     *   create: {
     *     // ... data to create a User_occurrences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_occurrences we want to update
     *   }
     * })
    **/
    upsert<T extends user_occurrencesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, user_occurrencesUpsertArgs<ExtArgs>>
    ): Prisma__user_occurrencesClient<$Result.GetResult<Prisma.$user_occurrencesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of User_occurrences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_occurrencesCountArgs} args - Arguments to filter User_occurrences to count.
     * @example
     * // Count the number of User_occurrences
     * const count = await prisma.user_occurrences.count({
     *   where: {
     *     // ... the filter for the User_occurrences we want to count
     *   }
     * })
    **/
    count<T extends user_occurrencesCountArgs>(
      args?: Subset<T, user_occurrencesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_occurrencesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_occurrences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_occurrencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_occurrencesAggregateArgs>(args: Subset<T, User_occurrencesAggregateArgs>): Prisma.PrismaPromise<GetUser_occurrencesAggregateType<T>>

    /**
     * Group by User_occurrences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_occurrencesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_occurrencesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_occurrencesGroupByArgs['orderBy'] }
        : { orderBy?: user_occurrencesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_occurrencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_occurrencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_occurrences model
   */
  readonly fields: user_occurrencesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_occurrences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_occurrencesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    occurrence<T extends occurrenceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, occurrenceDefaultArgs<ExtArgs>>): Prisma__occurrenceClient<$Result.GetResult<Prisma.$occurrencePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user_fingerprint<T extends user_fingerprintDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_fingerprintDefaultArgs<ExtArgs>>): Prisma__user_fingerprintClient<$Result.GetResult<Prisma.$user_fingerprintPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user_occurrences model
   */ 
  interface user_occurrencesFieldRefs {
    readonly id_occurrence: FieldRef<"user_occurrences", 'BigInt'>
    readonly datetime_violence: FieldRef<"user_occurrences", 'DateTime'>
    readonly id_user: FieldRef<"user_occurrences", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * user_occurrences findUnique
   */
  export type user_occurrencesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    /**
     * Filter, which user_occurrences to fetch.
     */
    where: user_occurrencesWhereUniqueInput
  }

  /**
   * user_occurrences findUniqueOrThrow
   */
  export type user_occurrencesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    /**
     * Filter, which user_occurrences to fetch.
     */
    where: user_occurrencesWhereUniqueInput
  }

  /**
   * user_occurrences findFirst
   */
  export type user_occurrencesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    /**
     * Filter, which user_occurrences to fetch.
     */
    where?: user_occurrencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_occurrences to fetch.
     */
    orderBy?: user_occurrencesOrderByWithRelationInput | user_occurrencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_occurrences.
     */
    cursor?: user_occurrencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_occurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_occurrences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_occurrences.
     */
    distinct?: User_occurrencesScalarFieldEnum | User_occurrencesScalarFieldEnum[]
  }

  /**
   * user_occurrences findFirstOrThrow
   */
  export type user_occurrencesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    /**
     * Filter, which user_occurrences to fetch.
     */
    where?: user_occurrencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_occurrences to fetch.
     */
    orderBy?: user_occurrencesOrderByWithRelationInput | user_occurrencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_occurrences.
     */
    cursor?: user_occurrencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_occurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_occurrences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_occurrences.
     */
    distinct?: User_occurrencesScalarFieldEnum | User_occurrencesScalarFieldEnum[]
  }

  /**
   * user_occurrences findMany
   */
  export type user_occurrencesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    /**
     * Filter, which user_occurrences to fetch.
     */
    where?: user_occurrencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_occurrences to fetch.
     */
    orderBy?: user_occurrencesOrderByWithRelationInput | user_occurrencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_occurrences.
     */
    cursor?: user_occurrencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_occurrences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_occurrences.
     */
    skip?: number
    distinct?: User_occurrencesScalarFieldEnum | User_occurrencesScalarFieldEnum[]
  }

  /**
   * user_occurrences create
   */
  export type user_occurrencesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    /**
     * The data needed to create a user_occurrences.
     */
    data: XOR<user_occurrencesCreateInput, user_occurrencesUncheckedCreateInput>
  }

  /**
   * user_occurrences createMany
   */
  export type user_occurrencesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_occurrences.
     */
    data: user_occurrencesCreateManyInput | user_occurrencesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_occurrences createManyAndReturn
   */
  export type user_occurrencesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    /**
     * The data used to create many user_occurrences.
     */
    data: user_occurrencesCreateManyInput | user_occurrencesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_occurrences update
   */
  export type user_occurrencesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    /**
     * The data needed to update a user_occurrences.
     */
    data: XOR<user_occurrencesUpdateInput, user_occurrencesUncheckedUpdateInput>
    /**
     * Choose, which user_occurrences to update.
     */
    where: user_occurrencesWhereUniqueInput
  }

  /**
   * user_occurrences updateMany
   */
  export type user_occurrencesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_occurrences.
     */
    data: XOR<user_occurrencesUpdateManyMutationInput, user_occurrencesUncheckedUpdateManyInput>
    /**
     * Filter which user_occurrences to update
     */
    where?: user_occurrencesWhereInput
  }

  /**
   * user_occurrences upsert
   */
  export type user_occurrencesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    /**
     * The filter to search for the user_occurrences to update in case it exists.
     */
    where: user_occurrencesWhereUniqueInput
    /**
     * In case the user_occurrences found by the `where` argument doesn't exist, create a new user_occurrences with this data.
     */
    create: XOR<user_occurrencesCreateInput, user_occurrencesUncheckedCreateInput>
    /**
     * In case the user_occurrences was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_occurrencesUpdateInput, user_occurrencesUncheckedUpdateInput>
  }

  /**
   * user_occurrences delete
   */
  export type user_occurrencesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
    /**
     * Filter which user_occurrences to delete.
     */
    where: user_occurrencesWhereUniqueInput
  }

  /**
   * user_occurrences deleteMany
   */
  export type user_occurrencesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_occurrences to delete
     */
    where?: user_occurrencesWhereInput
  }

  /**
   * user_occurrences without action
   */
  export type user_occurrencesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_occurrences
     */
    select?: user_occurrencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_occurrencesInclude<ExtArgs> | null
  }


  /**
   * Model violence_situations
   */

  export type AggregateViolence_situations = {
    _count: Violence_situationsCountAggregateOutputType | null
    _min: Violence_situationsMinAggregateOutputType | null
    _max: Violence_situationsMaxAggregateOutputType | null
  }

  export type Violence_situationsMinAggregateOutputType = {
    id_violenceoption: string | null
    description: string | null
  }

  export type Violence_situationsMaxAggregateOutputType = {
    id_violenceoption: string | null
    description: string | null
  }

  export type Violence_situationsCountAggregateOutputType = {
    id_violenceoption: number
    description: number
    _all: number
  }


  export type Violence_situationsMinAggregateInputType = {
    id_violenceoption?: true
    description?: true
  }

  export type Violence_situationsMaxAggregateInputType = {
    id_violenceoption?: true
    description?: true
  }

  export type Violence_situationsCountAggregateInputType = {
    id_violenceoption?: true
    description?: true
    _all?: true
  }

  export type Violence_situationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which violence_situations to aggregate.
     */
    where?: violence_situationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of violence_situations to fetch.
     */
    orderBy?: violence_situationsOrderByWithRelationInput | violence_situationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: violence_situationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` violence_situations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` violence_situations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned violence_situations
    **/
    _count?: true | Violence_situationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Violence_situationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Violence_situationsMaxAggregateInputType
  }

  export type GetViolence_situationsAggregateType<T extends Violence_situationsAggregateArgs> = {
        [P in keyof T & keyof AggregateViolence_situations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateViolence_situations[P]>
      : GetScalarType<T[P], AggregateViolence_situations[P]>
  }




  export type violence_situationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: violence_situationsWhereInput
    orderBy?: violence_situationsOrderByWithAggregationInput | violence_situationsOrderByWithAggregationInput[]
    by: Violence_situationsScalarFieldEnum[] | Violence_situationsScalarFieldEnum
    having?: violence_situationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Violence_situationsCountAggregateInputType | true
    _min?: Violence_situationsMinAggregateInputType
    _max?: Violence_situationsMaxAggregateInputType
  }

  export type Violence_situationsGroupByOutputType = {
    id_violenceoption: string
    description: string
    _count: Violence_situationsCountAggregateOutputType | null
    _min: Violence_situationsMinAggregateOutputType | null
    _max: Violence_situationsMaxAggregateOutputType | null
  }

  type GetViolence_situationsGroupByPayload<T extends violence_situationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Violence_situationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Violence_situationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Violence_situationsGroupByOutputType[P]>
            : GetScalarType<T[P], Violence_situationsGroupByOutputType[P]>
        }
      >
    >


  export type violence_situationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_violenceoption?: boolean
    description?: boolean
  }, ExtArgs["result"]["violence_situations"]>

  export type violence_situationsSelectScalar = {
    id_violenceoption?: boolean
    description?: boolean
  }



  export type $violence_situationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "violence_situations"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_violenceoption: string
      description: string
    }, ExtArgs["result"]["violence_situations"]>
    composites: {}
  }


  type violence_situationsGetPayload<S extends boolean | null | undefined | violence_situationsDefaultArgs> = $Result.GetResult<Prisma.$violence_situationsPayload, S>

  type violence_situationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<violence_situationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Violence_situationsCountAggregateInputType | true
    }

  export interface violence_situationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['violence_situations'], meta: { name: 'violence_situations' } }
    /**
     * Find zero or one Violence_situations that matches the filter.
     * @param {violence_situationsFindUniqueArgs} args - Arguments to find a Violence_situations
     * @example
     * // Get one Violence_situations
     * const violence_situations = await prisma.violence_situations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends violence_situationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, violence_situationsFindUniqueArgs<ExtArgs>>
    ): Prisma__violence_situationsClient<$Result.GetResult<Prisma.$violence_situationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Violence_situations that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {violence_situationsFindUniqueOrThrowArgs} args - Arguments to find a Violence_situations
     * @example
     * // Get one Violence_situations
     * const violence_situations = await prisma.violence_situations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends violence_situationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, violence_situationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__violence_situationsClient<$Result.GetResult<Prisma.$violence_situationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Violence_situations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {violence_situationsFindFirstArgs} args - Arguments to find a Violence_situations
     * @example
     * // Get one Violence_situations
     * const violence_situations = await prisma.violence_situations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends violence_situationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, violence_situationsFindFirstArgs<ExtArgs>>
    ): Prisma__violence_situationsClient<$Result.GetResult<Prisma.$violence_situationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Violence_situations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {violence_situationsFindFirstOrThrowArgs} args - Arguments to find a Violence_situations
     * @example
     * // Get one Violence_situations
     * const violence_situations = await prisma.violence_situations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends violence_situationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, violence_situationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__violence_situationsClient<$Result.GetResult<Prisma.$violence_situationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Violence_situations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {violence_situationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Violence_situations
     * const violence_situations = await prisma.violence_situations.findMany()
     * 
     * // Get first 10 Violence_situations
     * const violence_situations = await prisma.violence_situations.findMany({ take: 10 })
     * 
     * // Only select the `id_violenceoption`
     * const violence_situationsWithId_violenceoptionOnly = await prisma.violence_situations.findMany({ select: { id_violenceoption: true } })
     * 
    **/
    findMany<T extends violence_situationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, violence_situationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$violence_situationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Violence_situations.
     * @param {violence_situationsCreateArgs} args - Arguments to create a Violence_situations.
     * @example
     * // Create one Violence_situations
     * const Violence_situations = await prisma.violence_situations.create({
     *   data: {
     *     // ... data to create a Violence_situations
     *   }
     * })
     * 
    **/
    create<T extends violence_situationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, violence_situationsCreateArgs<ExtArgs>>
    ): Prisma__violence_situationsClient<$Result.GetResult<Prisma.$violence_situationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Violence_situations.
     * @param {violence_situationsCreateManyArgs} args - Arguments to create many Violence_situations.
     * @example
     * // Create many Violence_situations
     * const violence_situations = await prisma.violence_situations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends violence_situationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, violence_situationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Violence_situations and returns the data saved in the database.
     * @param {violence_situationsCreateManyAndReturnArgs} args - Arguments to create many Violence_situations.
     * @example
     * // Create many Violence_situations
     * const violence_situations = await prisma.violence_situations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Violence_situations and only return the `id_violenceoption`
     * const violence_situationsWithId_violenceoptionOnly = await prisma.violence_situations.createManyAndReturn({ 
     *   select: { id_violenceoption: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends violence_situationsCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, violence_situationsCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$violence_situationsPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Violence_situations.
     * @param {violence_situationsDeleteArgs} args - Arguments to delete one Violence_situations.
     * @example
     * // Delete one Violence_situations
     * const Violence_situations = await prisma.violence_situations.delete({
     *   where: {
     *     // ... filter to delete one Violence_situations
     *   }
     * })
     * 
    **/
    delete<T extends violence_situationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, violence_situationsDeleteArgs<ExtArgs>>
    ): Prisma__violence_situationsClient<$Result.GetResult<Prisma.$violence_situationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Violence_situations.
     * @param {violence_situationsUpdateArgs} args - Arguments to update one Violence_situations.
     * @example
     * // Update one Violence_situations
     * const violence_situations = await prisma.violence_situations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends violence_situationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, violence_situationsUpdateArgs<ExtArgs>>
    ): Prisma__violence_situationsClient<$Result.GetResult<Prisma.$violence_situationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Violence_situations.
     * @param {violence_situationsDeleteManyArgs} args - Arguments to filter Violence_situations to delete.
     * @example
     * // Delete a few Violence_situations
     * const { count } = await prisma.violence_situations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends violence_situationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, violence_situationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Violence_situations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {violence_situationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Violence_situations
     * const violence_situations = await prisma.violence_situations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends violence_situationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, violence_situationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Violence_situations.
     * @param {violence_situationsUpsertArgs} args - Arguments to update or create a Violence_situations.
     * @example
     * // Update or create a Violence_situations
     * const violence_situations = await prisma.violence_situations.upsert({
     *   create: {
     *     // ... data to create a Violence_situations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Violence_situations we want to update
     *   }
     * })
    **/
    upsert<T extends violence_situationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, violence_situationsUpsertArgs<ExtArgs>>
    ): Prisma__violence_situationsClient<$Result.GetResult<Prisma.$violence_situationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Violence_situations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {violence_situationsCountArgs} args - Arguments to filter Violence_situations to count.
     * @example
     * // Count the number of Violence_situations
     * const count = await prisma.violence_situations.count({
     *   where: {
     *     // ... the filter for the Violence_situations we want to count
     *   }
     * })
    **/
    count<T extends violence_situationsCountArgs>(
      args?: Subset<T, violence_situationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Violence_situationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Violence_situations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Violence_situationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Violence_situationsAggregateArgs>(args: Subset<T, Violence_situationsAggregateArgs>): Prisma.PrismaPromise<GetViolence_situationsAggregateType<T>>

    /**
     * Group by Violence_situations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {violence_situationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends violence_situationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: violence_situationsGroupByArgs['orderBy'] }
        : { orderBy?: violence_situationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, violence_situationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetViolence_situationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the violence_situations model
   */
  readonly fields: violence_situationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for violence_situations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__violence_situationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the violence_situations model
   */ 
  interface violence_situationsFieldRefs {
    readonly id_violenceoption: FieldRef<"violence_situations", 'String'>
    readonly description: FieldRef<"violence_situations", 'String'>
  }
    

  // Custom InputTypes
  /**
   * violence_situations findUnique
   */
  export type violence_situationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the violence_situations
     */
    select?: violence_situationsSelect<ExtArgs> | null
    /**
     * Filter, which violence_situations to fetch.
     */
    where: violence_situationsWhereUniqueInput
  }

  /**
   * violence_situations findUniqueOrThrow
   */
  export type violence_situationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the violence_situations
     */
    select?: violence_situationsSelect<ExtArgs> | null
    /**
     * Filter, which violence_situations to fetch.
     */
    where: violence_situationsWhereUniqueInput
  }

  /**
   * violence_situations findFirst
   */
  export type violence_situationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the violence_situations
     */
    select?: violence_situationsSelect<ExtArgs> | null
    /**
     * Filter, which violence_situations to fetch.
     */
    where?: violence_situationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of violence_situations to fetch.
     */
    orderBy?: violence_situationsOrderByWithRelationInput | violence_situationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for violence_situations.
     */
    cursor?: violence_situationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` violence_situations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` violence_situations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of violence_situations.
     */
    distinct?: Violence_situationsScalarFieldEnum | Violence_situationsScalarFieldEnum[]
  }

  /**
   * violence_situations findFirstOrThrow
   */
  export type violence_situationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the violence_situations
     */
    select?: violence_situationsSelect<ExtArgs> | null
    /**
     * Filter, which violence_situations to fetch.
     */
    where?: violence_situationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of violence_situations to fetch.
     */
    orderBy?: violence_situationsOrderByWithRelationInput | violence_situationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for violence_situations.
     */
    cursor?: violence_situationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` violence_situations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` violence_situations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of violence_situations.
     */
    distinct?: Violence_situationsScalarFieldEnum | Violence_situationsScalarFieldEnum[]
  }

  /**
   * violence_situations findMany
   */
  export type violence_situationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the violence_situations
     */
    select?: violence_situationsSelect<ExtArgs> | null
    /**
     * Filter, which violence_situations to fetch.
     */
    where?: violence_situationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of violence_situations to fetch.
     */
    orderBy?: violence_situationsOrderByWithRelationInput | violence_situationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing violence_situations.
     */
    cursor?: violence_situationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` violence_situations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` violence_situations.
     */
    skip?: number
    distinct?: Violence_situationsScalarFieldEnum | Violence_situationsScalarFieldEnum[]
  }

  /**
   * violence_situations create
   */
  export type violence_situationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the violence_situations
     */
    select?: violence_situationsSelect<ExtArgs> | null
    /**
     * The data needed to create a violence_situations.
     */
    data: XOR<violence_situationsCreateInput, violence_situationsUncheckedCreateInput>
  }

  /**
   * violence_situations createMany
   */
  export type violence_situationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many violence_situations.
     */
    data: violence_situationsCreateManyInput | violence_situationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * violence_situations createManyAndReturn
   */
  export type violence_situationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the violence_situations
     */
    select?: violence_situationsSelect<ExtArgs> | null
    /**
     * The data used to create many violence_situations.
     */
    data: violence_situationsCreateManyInput | violence_situationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * violence_situations update
   */
  export type violence_situationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the violence_situations
     */
    select?: violence_situationsSelect<ExtArgs> | null
    /**
     * The data needed to update a violence_situations.
     */
    data: XOR<violence_situationsUpdateInput, violence_situationsUncheckedUpdateInput>
    /**
     * Choose, which violence_situations to update.
     */
    where: violence_situationsWhereUniqueInput
  }

  /**
   * violence_situations updateMany
   */
  export type violence_situationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update violence_situations.
     */
    data: XOR<violence_situationsUpdateManyMutationInput, violence_situationsUncheckedUpdateManyInput>
    /**
     * Filter which violence_situations to update
     */
    where?: violence_situationsWhereInput
  }

  /**
   * violence_situations upsert
   */
  export type violence_situationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the violence_situations
     */
    select?: violence_situationsSelect<ExtArgs> | null
    /**
     * The filter to search for the violence_situations to update in case it exists.
     */
    where: violence_situationsWhereUniqueInput
    /**
     * In case the violence_situations found by the `where` argument doesn't exist, create a new violence_situations with this data.
     */
    create: XOR<violence_situationsCreateInput, violence_situationsUncheckedCreateInput>
    /**
     * In case the violence_situations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<violence_situationsUpdateInput, violence_situationsUncheckedUpdateInput>
  }

  /**
   * violence_situations delete
   */
  export type violence_situationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the violence_situations
     */
    select?: violence_situationsSelect<ExtArgs> | null
    /**
     * Filter which violence_situations to delete.
     */
    where: violence_situationsWhereUniqueInput
  }

  /**
   * violence_situations deleteMany
   */
  export type violence_situationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which violence_situations to delete
     */
    where?: violence_situationsWhereInput
  }

  /**
   * violence_situations without action
   */
  export type violence_situationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the violence_situations
     */
    select?: violence_situationsSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const OccurrenceScalarFieldEnum: {
    id_occurrence: 'id_occurrence',
    id_user: 'id_user',
    datetime_submission: 'datetime_submission',
    age_group: 'age_group',
    datetime_violence: 'datetime_violence',
    city_violence: 'city_violence',
    state_violence: 'state_violence',
    latitude: 'latitude',
    longitude: 'longitude',
    violences_options: 'violences_options',
    violence_type: 'violence_type'
  };

  export type OccurrenceScalarFieldEnum = (typeof OccurrenceScalarFieldEnum)[keyof typeof OccurrenceScalarFieldEnum]


  export const State_listScalarFieldEnum: {
    id_state: 'id_state',
    uf_state: 'uf_state',
    name_state: 'name_state',
    num_occurrences: 'num_occurrences'
  };

  export type State_listScalarFieldEnum = (typeof State_listScalarFieldEnum)[keyof typeof State_listScalarFieldEnum]


  export const Types_of_violenceScalarFieldEnum: {
    id_violencetype: 'id_violencetype',
    description: 'description'
  };

  export type Types_of_violenceScalarFieldEnum = (typeof Types_of_violenceScalarFieldEnum)[keyof typeof Types_of_violenceScalarFieldEnum]


  export const User_fingerprintScalarFieldEnum: {
    id_user: 'id_user',
    fingerprint: 'fingerprint'
  };

  export type User_fingerprintScalarFieldEnum = (typeof User_fingerprintScalarFieldEnum)[keyof typeof User_fingerprintScalarFieldEnum]


  export const User_occurrencesScalarFieldEnum: {
    id_occurrence: 'id_occurrence',
    datetime_violence: 'datetime_violence',
    id_user: 'id_user'
  };

  export type User_occurrencesScalarFieldEnum = (typeof User_occurrencesScalarFieldEnum)[keyof typeof User_occurrencesScalarFieldEnum]


  export const Violence_situationsScalarFieldEnum: {
    id_violenceoption: 'id_violenceoption',
    description: 'description'
  };

  export type Violence_situationsScalarFieldEnum = (typeof Violence_situationsScalarFieldEnum)[keyof typeof Violence_situationsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type occurrenceWhereInput = {
    AND?: occurrenceWhereInput | occurrenceWhereInput[]
    OR?: occurrenceWhereInput[]
    NOT?: occurrenceWhereInput | occurrenceWhereInput[]
    id_occurrence?: BigIntFilter<"occurrence"> | bigint | number
    id_user?: BigIntFilter<"occurrence"> | bigint | number
    datetime_submission?: DateTimeFilter<"occurrence"> | Date | string
    age_group?: StringFilter<"occurrence"> | string
    datetime_violence?: DateTimeFilter<"occurrence"> | Date | string
    city_violence?: StringNullableFilter<"occurrence"> | string | null
    state_violence?: StringFilter<"occurrence"> | string
    latitude?: DecimalFilter<"occurrence"> | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFilter<"occurrence"> | Decimal | DecimalJsLike | number | string
    violences_options?: StringFilter<"occurrence"> | string
    violence_type?: StringFilter<"occurrence"> | string
    state_list?: XOR<State_listRelationFilter, state_listWhereInput>
    user_fingerprint?: XOR<User_fingerprintRelationFilter, user_fingerprintWhereInput>
    user_occurrences?: User_occurrencesListRelationFilter
  }

  export type occurrenceOrderByWithRelationInput = {
    id_occurrence?: SortOrder
    id_user?: SortOrder
    datetime_submission?: SortOrder
    age_group?: SortOrder
    datetime_violence?: SortOrder
    city_violence?: SortOrderInput | SortOrder
    state_violence?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    violences_options?: SortOrder
    violence_type?: SortOrder
    state_list?: state_listOrderByWithRelationInput
    user_fingerprint?: user_fingerprintOrderByWithRelationInput
    user_occurrences?: user_occurrencesOrderByRelationAggregateInput
  }

  export type occurrenceWhereUniqueInput = Prisma.AtLeast<{
    id_occurrence?: bigint | number
    AND?: occurrenceWhereInput | occurrenceWhereInput[]
    OR?: occurrenceWhereInput[]
    NOT?: occurrenceWhereInput | occurrenceWhereInput[]
    id_user?: BigIntFilter<"occurrence"> | bigint | number
    datetime_submission?: DateTimeFilter<"occurrence"> | Date | string
    age_group?: StringFilter<"occurrence"> | string
    datetime_violence?: DateTimeFilter<"occurrence"> | Date | string
    city_violence?: StringNullableFilter<"occurrence"> | string | null
    state_violence?: StringFilter<"occurrence"> | string
    latitude?: DecimalFilter<"occurrence"> | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFilter<"occurrence"> | Decimal | DecimalJsLike | number | string
    violences_options?: StringFilter<"occurrence"> | string
    violence_type?: StringFilter<"occurrence"> | string
    state_list?: XOR<State_listRelationFilter, state_listWhereInput>
    user_fingerprint?: XOR<User_fingerprintRelationFilter, user_fingerprintWhereInput>
    user_occurrences?: User_occurrencesListRelationFilter
  }, "id_occurrence">

  export type occurrenceOrderByWithAggregationInput = {
    id_occurrence?: SortOrder
    id_user?: SortOrder
    datetime_submission?: SortOrder
    age_group?: SortOrder
    datetime_violence?: SortOrder
    city_violence?: SortOrderInput | SortOrder
    state_violence?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    violences_options?: SortOrder
    violence_type?: SortOrder
    _count?: occurrenceCountOrderByAggregateInput
    _avg?: occurrenceAvgOrderByAggregateInput
    _max?: occurrenceMaxOrderByAggregateInput
    _min?: occurrenceMinOrderByAggregateInput
    _sum?: occurrenceSumOrderByAggregateInput
  }

  export type occurrenceScalarWhereWithAggregatesInput = {
    AND?: occurrenceScalarWhereWithAggregatesInput | occurrenceScalarWhereWithAggregatesInput[]
    OR?: occurrenceScalarWhereWithAggregatesInput[]
    NOT?: occurrenceScalarWhereWithAggregatesInput | occurrenceScalarWhereWithAggregatesInput[]
    id_occurrence?: BigIntWithAggregatesFilter<"occurrence"> | bigint | number
    id_user?: BigIntWithAggregatesFilter<"occurrence"> | bigint | number
    datetime_submission?: DateTimeWithAggregatesFilter<"occurrence"> | Date | string
    age_group?: StringWithAggregatesFilter<"occurrence"> | string
    datetime_violence?: DateTimeWithAggregatesFilter<"occurrence"> | Date | string
    city_violence?: StringNullableWithAggregatesFilter<"occurrence"> | string | null
    state_violence?: StringWithAggregatesFilter<"occurrence"> | string
    latitude?: DecimalWithAggregatesFilter<"occurrence"> | Decimal | DecimalJsLike | number | string
    longitude?: DecimalWithAggregatesFilter<"occurrence"> | Decimal | DecimalJsLike | number | string
    violences_options?: StringWithAggregatesFilter<"occurrence"> | string
    violence_type?: StringWithAggregatesFilter<"occurrence"> | string
  }

  export type state_listWhereInput = {
    AND?: state_listWhereInput | state_listWhereInput[]
    OR?: state_listWhereInput[]
    NOT?: state_listWhereInput | state_listWhereInput[]
    id_state?: BigIntFilter<"state_list"> | bigint | number
    uf_state?: StringFilter<"state_list"> | string
    name_state?: StringFilter<"state_list"> | string
    num_occurrences?: BigIntNullableFilter<"state_list"> | bigint | number | null
    occurrence?: OccurrenceListRelationFilter
  }

  export type state_listOrderByWithRelationInput = {
    id_state?: SortOrder
    uf_state?: SortOrder
    name_state?: SortOrder
    num_occurrences?: SortOrderInput | SortOrder
    occurrence?: occurrenceOrderByRelationAggregateInput
  }

  export type state_listWhereUniqueInput = Prisma.AtLeast<{
    id_state?: bigint | number
    uf_state?: string
    name_state?: string
    AND?: state_listWhereInput | state_listWhereInput[]
    OR?: state_listWhereInput[]
    NOT?: state_listWhereInput | state_listWhereInput[]
    num_occurrences?: BigIntNullableFilter<"state_list"> | bigint | number | null
    occurrence?: OccurrenceListRelationFilter
  }, "id_state" | "uf_state" | "name_state">

  export type state_listOrderByWithAggregationInput = {
    id_state?: SortOrder
    uf_state?: SortOrder
    name_state?: SortOrder
    num_occurrences?: SortOrderInput | SortOrder
    _count?: state_listCountOrderByAggregateInput
    _avg?: state_listAvgOrderByAggregateInput
    _max?: state_listMaxOrderByAggregateInput
    _min?: state_listMinOrderByAggregateInput
    _sum?: state_listSumOrderByAggregateInput
  }

  export type state_listScalarWhereWithAggregatesInput = {
    AND?: state_listScalarWhereWithAggregatesInput | state_listScalarWhereWithAggregatesInput[]
    OR?: state_listScalarWhereWithAggregatesInput[]
    NOT?: state_listScalarWhereWithAggregatesInput | state_listScalarWhereWithAggregatesInput[]
    id_state?: BigIntWithAggregatesFilter<"state_list"> | bigint | number
    uf_state?: StringWithAggregatesFilter<"state_list"> | string
    name_state?: StringWithAggregatesFilter<"state_list"> | string
    num_occurrences?: BigIntNullableWithAggregatesFilter<"state_list"> | bigint | number | null
  }

  export type types_of_violenceWhereInput = {
    AND?: types_of_violenceWhereInput | types_of_violenceWhereInput[]
    OR?: types_of_violenceWhereInput[]
    NOT?: types_of_violenceWhereInput | types_of_violenceWhereInput[]
    id_violencetype?: StringFilter<"types_of_violence"> | string
    description?: StringFilter<"types_of_violence"> | string
  }

  export type types_of_violenceOrderByWithRelationInput = {
    id_violencetype?: SortOrder
    description?: SortOrder
  }

  export type types_of_violenceWhereUniqueInput = Prisma.AtLeast<{
    id_violencetype?: string
    AND?: types_of_violenceWhereInput | types_of_violenceWhereInput[]
    OR?: types_of_violenceWhereInput[]
    NOT?: types_of_violenceWhereInput | types_of_violenceWhereInput[]
    description?: StringFilter<"types_of_violence"> | string
  }, "id_violencetype">

  export type types_of_violenceOrderByWithAggregationInput = {
    id_violencetype?: SortOrder
    description?: SortOrder
    _count?: types_of_violenceCountOrderByAggregateInput
    _max?: types_of_violenceMaxOrderByAggregateInput
    _min?: types_of_violenceMinOrderByAggregateInput
  }

  export type types_of_violenceScalarWhereWithAggregatesInput = {
    AND?: types_of_violenceScalarWhereWithAggregatesInput | types_of_violenceScalarWhereWithAggregatesInput[]
    OR?: types_of_violenceScalarWhereWithAggregatesInput[]
    NOT?: types_of_violenceScalarWhereWithAggregatesInput | types_of_violenceScalarWhereWithAggregatesInput[]
    id_violencetype?: StringWithAggregatesFilter<"types_of_violence"> | string
    description?: StringWithAggregatesFilter<"types_of_violence"> | string
  }

  export type user_fingerprintWhereInput = {
    AND?: user_fingerprintWhereInput | user_fingerprintWhereInput[]
    OR?: user_fingerprintWhereInput[]
    NOT?: user_fingerprintWhereInput | user_fingerprintWhereInput[]
    id_user?: BigIntFilter<"user_fingerprint"> | bigint | number
    fingerprint?: StringFilter<"user_fingerprint"> | string
    user_occurrences?: User_occurrencesListRelationFilter
    occurrence?: OccurrenceListRelationFilter
  }

  export type user_fingerprintOrderByWithRelationInput = {
    id_user?: SortOrder
    fingerprint?: SortOrder
    user_occurrences?: user_occurrencesOrderByRelationAggregateInput
    occurrence?: occurrenceOrderByRelationAggregateInput
  }

  export type user_fingerprintWhereUniqueInput = Prisma.AtLeast<{
    id_user?: bigint | number
    fingerprint?: string
    AND?: user_fingerprintWhereInput | user_fingerprintWhereInput[]
    OR?: user_fingerprintWhereInput[]
    NOT?: user_fingerprintWhereInput | user_fingerprintWhereInput[]
    user_occurrences?: User_occurrencesListRelationFilter
    occurrence?: OccurrenceListRelationFilter
  }, "id_user" | "fingerprint">

  export type user_fingerprintOrderByWithAggregationInput = {
    id_user?: SortOrder
    fingerprint?: SortOrder
    _count?: user_fingerprintCountOrderByAggregateInput
    _avg?: user_fingerprintAvgOrderByAggregateInput
    _max?: user_fingerprintMaxOrderByAggregateInput
    _min?: user_fingerprintMinOrderByAggregateInput
    _sum?: user_fingerprintSumOrderByAggregateInput
  }

  export type user_fingerprintScalarWhereWithAggregatesInput = {
    AND?: user_fingerprintScalarWhereWithAggregatesInput | user_fingerprintScalarWhereWithAggregatesInput[]
    OR?: user_fingerprintScalarWhereWithAggregatesInput[]
    NOT?: user_fingerprintScalarWhereWithAggregatesInput | user_fingerprintScalarWhereWithAggregatesInput[]
    id_user?: BigIntWithAggregatesFilter<"user_fingerprint"> | bigint | number
    fingerprint?: StringWithAggregatesFilter<"user_fingerprint"> | string
  }

  export type user_occurrencesWhereInput = {
    AND?: user_occurrencesWhereInput | user_occurrencesWhereInput[]
    OR?: user_occurrencesWhereInput[]
    NOT?: user_occurrencesWhereInput | user_occurrencesWhereInput[]
    id_occurrence?: BigIntFilter<"user_occurrences"> | bigint | number
    datetime_violence?: DateTimeFilter<"user_occurrences"> | Date | string
    id_user?: BigIntFilter<"user_occurrences"> | bigint | number
    occurrence?: XOR<OccurrenceRelationFilter, occurrenceWhereInput>
    user_fingerprint?: XOR<User_fingerprintRelationFilter, user_fingerprintWhereInput>
  }

  export type user_occurrencesOrderByWithRelationInput = {
    id_occurrence?: SortOrder
    datetime_violence?: SortOrder
    id_user?: SortOrder
    occurrence?: occurrenceOrderByWithRelationInput
    user_fingerprint?: user_fingerprintOrderByWithRelationInput
  }

  export type user_occurrencesWhereUniqueInput = Prisma.AtLeast<{
    id_occurrence?: bigint | number
    AND?: user_occurrencesWhereInput | user_occurrencesWhereInput[]
    OR?: user_occurrencesWhereInput[]
    NOT?: user_occurrencesWhereInput | user_occurrencesWhereInput[]
    datetime_violence?: DateTimeFilter<"user_occurrences"> | Date | string
    id_user?: BigIntFilter<"user_occurrences"> | bigint | number
    occurrence?: XOR<OccurrenceRelationFilter, occurrenceWhereInput>
    user_fingerprint?: XOR<User_fingerprintRelationFilter, user_fingerprintWhereInput>
  }, "id_occurrence">

  export type user_occurrencesOrderByWithAggregationInput = {
    id_occurrence?: SortOrder
    datetime_violence?: SortOrder
    id_user?: SortOrder
    _count?: user_occurrencesCountOrderByAggregateInput
    _avg?: user_occurrencesAvgOrderByAggregateInput
    _max?: user_occurrencesMaxOrderByAggregateInput
    _min?: user_occurrencesMinOrderByAggregateInput
    _sum?: user_occurrencesSumOrderByAggregateInput
  }

  export type user_occurrencesScalarWhereWithAggregatesInput = {
    AND?: user_occurrencesScalarWhereWithAggregatesInput | user_occurrencesScalarWhereWithAggregatesInput[]
    OR?: user_occurrencesScalarWhereWithAggregatesInput[]
    NOT?: user_occurrencesScalarWhereWithAggregatesInput | user_occurrencesScalarWhereWithAggregatesInput[]
    id_occurrence?: BigIntWithAggregatesFilter<"user_occurrences"> | bigint | number
    datetime_violence?: DateTimeWithAggregatesFilter<"user_occurrences"> | Date | string
    id_user?: BigIntWithAggregatesFilter<"user_occurrences"> | bigint | number
  }

  export type violence_situationsWhereInput = {
    AND?: violence_situationsWhereInput | violence_situationsWhereInput[]
    OR?: violence_situationsWhereInput[]
    NOT?: violence_situationsWhereInput | violence_situationsWhereInput[]
    id_violenceoption?: StringFilter<"violence_situations"> | string
    description?: StringFilter<"violence_situations"> | string
  }

  export type violence_situationsOrderByWithRelationInput = {
    id_violenceoption?: SortOrder
    description?: SortOrder
  }

  export type violence_situationsWhereUniqueInput = Prisma.AtLeast<{
    id_violenceoption?: string
    AND?: violence_situationsWhereInput | violence_situationsWhereInput[]
    OR?: violence_situationsWhereInput[]
    NOT?: violence_situationsWhereInput | violence_situationsWhereInput[]
    description?: StringFilter<"violence_situations"> | string
  }, "id_violenceoption">

  export type violence_situationsOrderByWithAggregationInput = {
    id_violenceoption?: SortOrder
    description?: SortOrder
    _count?: violence_situationsCountOrderByAggregateInput
    _max?: violence_situationsMaxOrderByAggregateInput
    _min?: violence_situationsMinOrderByAggregateInput
  }

  export type violence_situationsScalarWhereWithAggregatesInput = {
    AND?: violence_situationsScalarWhereWithAggregatesInput | violence_situationsScalarWhereWithAggregatesInput[]
    OR?: violence_situationsScalarWhereWithAggregatesInput[]
    NOT?: violence_situationsScalarWhereWithAggregatesInput | violence_situationsScalarWhereWithAggregatesInput[]
    id_violenceoption?: StringWithAggregatesFilter<"violence_situations"> | string
    description?: StringWithAggregatesFilter<"violence_situations"> | string
  }

  export type occurrenceCreateInput = {
    id_occurrence?: bigint | number
    datetime_submission: Date | string
    age_group: string
    datetime_violence: Date | string
    city_violence?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    violences_options: string
    violence_type: string
    state_list: state_listCreateNestedOneWithoutOccurrenceInput
    user_fingerprint: user_fingerprintCreateNestedOneWithoutOccurrenceInput
    user_occurrences?: user_occurrencesCreateNestedManyWithoutOccurrenceInput
  }

  export type occurrenceUncheckedCreateInput = {
    id_occurrence?: bigint | number
    id_user: bigint | number
    datetime_submission: Date | string
    age_group: string
    datetime_violence: Date | string
    city_violence?: string | null
    state_violence: string
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    violences_options: string
    violence_type: string
    user_occurrences?: user_occurrencesUncheckedCreateNestedManyWithoutOccurrenceInput
  }

  export type occurrenceUpdateInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
    state_list?: state_listUpdateOneRequiredWithoutOccurrenceNestedInput
    user_fingerprint?: user_fingerprintUpdateOneRequiredWithoutOccurrenceNestedInput
    user_occurrences?: user_occurrencesUpdateManyWithoutOccurrenceNestedInput
  }

  export type occurrenceUncheckedUpdateInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    state_violence?: StringFieldUpdateOperationsInput | string
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
    user_occurrences?: user_occurrencesUncheckedUpdateManyWithoutOccurrenceNestedInput
  }

  export type occurrenceCreateManyInput = {
    id_occurrence?: bigint | number
    id_user: bigint | number
    datetime_submission: Date | string
    age_group: string
    datetime_violence: Date | string
    city_violence?: string | null
    state_violence: string
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    violences_options: string
    violence_type: string
  }

  export type occurrenceUpdateManyMutationInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
  }

  export type occurrenceUncheckedUpdateManyInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    state_violence?: StringFieldUpdateOperationsInput | string
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
  }

  export type state_listCreateInput = {
    id_state?: bigint | number
    uf_state: string
    name_state: string
    num_occurrences?: bigint | number | null
    occurrence?: occurrenceCreateNestedManyWithoutState_listInput
  }

  export type state_listUncheckedCreateInput = {
    id_state?: bigint | number
    uf_state: string
    name_state: string
    num_occurrences?: bigint | number | null
    occurrence?: occurrenceUncheckedCreateNestedManyWithoutState_listInput
  }

  export type state_listUpdateInput = {
    id_state?: BigIntFieldUpdateOperationsInput | bigint | number
    uf_state?: StringFieldUpdateOperationsInput | string
    name_state?: StringFieldUpdateOperationsInput | string
    num_occurrences?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    occurrence?: occurrenceUpdateManyWithoutState_listNestedInput
  }

  export type state_listUncheckedUpdateInput = {
    id_state?: BigIntFieldUpdateOperationsInput | bigint | number
    uf_state?: StringFieldUpdateOperationsInput | string
    name_state?: StringFieldUpdateOperationsInput | string
    num_occurrences?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    occurrence?: occurrenceUncheckedUpdateManyWithoutState_listNestedInput
  }

  export type state_listCreateManyInput = {
    id_state?: bigint | number
    uf_state: string
    name_state: string
    num_occurrences?: bigint | number | null
  }

  export type state_listUpdateManyMutationInput = {
    id_state?: BigIntFieldUpdateOperationsInput | bigint | number
    uf_state?: StringFieldUpdateOperationsInput | string
    name_state?: StringFieldUpdateOperationsInput | string
    num_occurrences?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type state_listUncheckedUpdateManyInput = {
    id_state?: BigIntFieldUpdateOperationsInput | bigint | number
    uf_state?: StringFieldUpdateOperationsInput | string
    name_state?: StringFieldUpdateOperationsInput | string
    num_occurrences?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type types_of_violenceCreateInput = {
    id_violencetype: string
    description: string
  }

  export type types_of_violenceUncheckedCreateInput = {
    id_violencetype: string
    description: string
  }

  export type types_of_violenceUpdateInput = {
    id_violencetype?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type types_of_violenceUncheckedUpdateInput = {
    id_violencetype?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type types_of_violenceCreateManyInput = {
    id_violencetype: string
    description: string
  }

  export type types_of_violenceUpdateManyMutationInput = {
    id_violencetype?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type types_of_violenceUncheckedUpdateManyInput = {
    id_violencetype?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type user_fingerprintCreateInput = {
    id_user?: bigint | number
    fingerprint: string
    user_occurrences?: user_occurrencesCreateNestedManyWithoutUser_fingerprintInput
    occurrence?: occurrenceCreateNestedManyWithoutUser_fingerprintInput
  }

  export type user_fingerprintUncheckedCreateInput = {
    id_user?: bigint | number
    fingerprint: string
    user_occurrences?: user_occurrencesUncheckedCreateNestedManyWithoutUser_fingerprintInput
    occurrence?: occurrenceUncheckedCreateNestedManyWithoutUser_fingerprintInput
  }

  export type user_fingerprintUpdateInput = {
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    fingerprint?: StringFieldUpdateOperationsInput | string
    user_occurrences?: user_occurrencesUpdateManyWithoutUser_fingerprintNestedInput
    occurrence?: occurrenceUpdateManyWithoutUser_fingerprintNestedInput
  }

  export type user_fingerprintUncheckedUpdateInput = {
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    fingerprint?: StringFieldUpdateOperationsInput | string
    user_occurrences?: user_occurrencesUncheckedUpdateManyWithoutUser_fingerprintNestedInput
    occurrence?: occurrenceUncheckedUpdateManyWithoutUser_fingerprintNestedInput
  }

  export type user_fingerprintCreateManyInput = {
    id_user?: bigint | number
    fingerprint: string
  }

  export type user_fingerprintUpdateManyMutationInput = {
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    fingerprint?: StringFieldUpdateOperationsInput | string
  }

  export type user_fingerprintUncheckedUpdateManyInput = {
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    fingerprint?: StringFieldUpdateOperationsInput | string
  }

  export type user_occurrencesCreateInput = {
    datetime_violence: Date | string
    occurrence: occurrenceCreateNestedOneWithoutUser_occurrencesInput
    user_fingerprint: user_fingerprintCreateNestedOneWithoutUser_occurrencesInput
  }

  export type user_occurrencesUncheckedCreateInput = {
    id_occurrence: bigint | number
    datetime_violence: Date | string
    id_user: bigint | number
  }

  export type user_occurrencesUpdateInput = {
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrence?: occurrenceUpdateOneRequiredWithoutUser_occurrencesNestedInput
    user_fingerprint?: user_fingerprintUpdateOneRequiredWithoutUser_occurrencesNestedInput
  }

  export type user_occurrencesUncheckedUpdateInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type user_occurrencesCreateManyInput = {
    id_occurrence: bigint | number
    datetime_violence: Date | string
    id_user: bigint | number
  }

  export type user_occurrencesUpdateManyMutationInput = {
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_occurrencesUncheckedUpdateManyInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type violence_situationsCreateInput = {
    id_violenceoption: string
    description: string
  }

  export type violence_situationsUncheckedCreateInput = {
    id_violenceoption: string
    description: string
  }

  export type violence_situationsUpdateInput = {
    id_violenceoption?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type violence_situationsUncheckedUpdateInput = {
    id_violenceoption?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type violence_situationsCreateManyInput = {
    id_violenceoption: string
    description: string
  }

  export type violence_situationsUpdateManyMutationInput = {
    id_violenceoption?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type violence_situationsUncheckedUpdateManyInput = {
    id_violenceoption?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type State_listRelationFilter = {
    is?: state_listWhereInput
    isNot?: state_listWhereInput
  }

  export type User_fingerprintRelationFilter = {
    is?: user_fingerprintWhereInput
    isNot?: user_fingerprintWhereInput
  }

  export type User_occurrencesListRelationFilter = {
    every?: user_occurrencesWhereInput
    some?: user_occurrencesWhereInput
    none?: user_occurrencesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type user_occurrencesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type occurrenceCountOrderByAggregateInput = {
    id_occurrence?: SortOrder
    id_user?: SortOrder
    datetime_submission?: SortOrder
    age_group?: SortOrder
    datetime_violence?: SortOrder
    city_violence?: SortOrder
    state_violence?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    violences_options?: SortOrder
    violence_type?: SortOrder
  }

  export type occurrenceAvgOrderByAggregateInput = {
    id_occurrence?: SortOrder
    id_user?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type occurrenceMaxOrderByAggregateInput = {
    id_occurrence?: SortOrder
    id_user?: SortOrder
    datetime_submission?: SortOrder
    age_group?: SortOrder
    datetime_violence?: SortOrder
    city_violence?: SortOrder
    state_violence?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    violences_options?: SortOrder
    violence_type?: SortOrder
  }

  export type occurrenceMinOrderByAggregateInput = {
    id_occurrence?: SortOrder
    id_user?: SortOrder
    datetime_submission?: SortOrder
    age_group?: SortOrder
    datetime_violence?: SortOrder
    city_violence?: SortOrder
    state_violence?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    violences_options?: SortOrder
    violence_type?: SortOrder
  }

  export type occurrenceSumOrderByAggregateInput = {
    id_occurrence?: SortOrder
    id_user?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type OccurrenceListRelationFilter = {
    every?: occurrenceWhereInput
    some?: occurrenceWhereInput
    none?: occurrenceWhereInput
  }

  export type occurrenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type state_listCountOrderByAggregateInput = {
    id_state?: SortOrder
    uf_state?: SortOrder
    name_state?: SortOrder
    num_occurrences?: SortOrder
  }

  export type state_listAvgOrderByAggregateInput = {
    id_state?: SortOrder
    num_occurrences?: SortOrder
  }

  export type state_listMaxOrderByAggregateInput = {
    id_state?: SortOrder
    uf_state?: SortOrder
    name_state?: SortOrder
    num_occurrences?: SortOrder
  }

  export type state_listMinOrderByAggregateInput = {
    id_state?: SortOrder
    uf_state?: SortOrder
    name_state?: SortOrder
    num_occurrences?: SortOrder
  }

  export type state_listSumOrderByAggregateInput = {
    id_state?: SortOrder
    num_occurrences?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type types_of_violenceCountOrderByAggregateInput = {
    id_violencetype?: SortOrder
    description?: SortOrder
  }

  export type types_of_violenceMaxOrderByAggregateInput = {
    id_violencetype?: SortOrder
    description?: SortOrder
  }

  export type types_of_violenceMinOrderByAggregateInput = {
    id_violencetype?: SortOrder
    description?: SortOrder
  }

  export type user_fingerprintCountOrderByAggregateInput = {
    id_user?: SortOrder
    fingerprint?: SortOrder
  }

  export type user_fingerprintAvgOrderByAggregateInput = {
    id_user?: SortOrder
  }

  export type user_fingerprintMaxOrderByAggregateInput = {
    id_user?: SortOrder
    fingerprint?: SortOrder
  }

  export type user_fingerprintMinOrderByAggregateInput = {
    id_user?: SortOrder
    fingerprint?: SortOrder
  }

  export type user_fingerprintSumOrderByAggregateInput = {
    id_user?: SortOrder
  }

  export type OccurrenceRelationFilter = {
    is?: occurrenceWhereInput
    isNot?: occurrenceWhereInput
  }

  export type user_occurrencesCountOrderByAggregateInput = {
    id_occurrence?: SortOrder
    datetime_violence?: SortOrder
    id_user?: SortOrder
  }

  export type user_occurrencesAvgOrderByAggregateInput = {
    id_occurrence?: SortOrder
    id_user?: SortOrder
  }

  export type user_occurrencesMaxOrderByAggregateInput = {
    id_occurrence?: SortOrder
    datetime_violence?: SortOrder
    id_user?: SortOrder
  }

  export type user_occurrencesMinOrderByAggregateInput = {
    id_occurrence?: SortOrder
    datetime_violence?: SortOrder
    id_user?: SortOrder
  }

  export type user_occurrencesSumOrderByAggregateInput = {
    id_occurrence?: SortOrder
    id_user?: SortOrder
  }

  export type violence_situationsCountOrderByAggregateInput = {
    id_violenceoption?: SortOrder
    description?: SortOrder
  }

  export type violence_situationsMaxOrderByAggregateInput = {
    id_violenceoption?: SortOrder
    description?: SortOrder
  }

  export type violence_situationsMinOrderByAggregateInput = {
    id_violenceoption?: SortOrder
    description?: SortOrder
  }

  export type state_listCreateNestedOneWithoutOccurrenceInput = {
    create?: XOR<state_listCreateWithoutOccurrenceInput, state_listUncheckedCreateWithoutOccurrenceInput>
    connectOrCreate?: state_listCreateOrConnectWithoutOccurrenceInput
    connect?: state_listWhereUniqueInput
  }

  export type user_fingerprintCreateNestedOneWithoutOccurrenceInput = {
    create?: XOR<user_fingerprintCreateWithoutOccurrenceInput, user_fingerprintUncheckedCreateWithoutOccurrenceInput>
    connectOrCreate?: user_fingerprintCreateOrConnectWithoutOccurrenceInput
    connect?: user_fingerprintWhereUniqueInput
  }

  export type user_occurrencesCreateNestedManyWithoutOccurrenceInput = {
    create?: XOR<user_occurrencesCreateWithoutOccurrenceInput, user_occurrencesUncheckedCreateWithoutOccurrenceInput> | user_occurrencesCreateWithoutOccurrenceInput[] | user_occurrencesUncheckedCreateWithoutOccurrenceInput[]
    connectOrCreate?: user_occurrencesCreateOrConnectWithoutOccurrenceInput | user_occurrencesCreateOrConnectWithoutOccurrenceInput[]
    createMany?: user_occurrencesCreateManyOccurrenceInputEnvelope
    connect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
  }

  export type user_occurrencesUncheckedCreateNestedManyWithoutOccurrenceInput = {
    create?: XOR<user_occurrencesCreateWithoutOccurrenceInput, user_occurrencesUncheckedCreateWithoutOccurrenceInput> | user_occurrencesCreateWithoutOccurrenceInput[] | user_occurrencesUncheckedCreateWithoutOccurrenceInput[]
    connectOrCreate?: user_occurrencesCreateOrConnectWithoutOccurrenceInput | user_occurrencesCreateOrConnectWithoutOccurrenceInput[]
    createMany?: user_occurrencesCreateManyOccurrenceInputEnvelope
    connect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type state_listUpdateOneRequiredWithoutOccurrenceNestedInput = {
    create?: XOR<state_listCreateWithoutOccurrenceInput, state_listUncheckedCreateWithoutOccurrenceInput>
    connectOrCreate?: state_listCreateOrConnectWithoutOccurrenceInput
    upsert?: state_listUpsertWithoutOccurrenceInput
    connect?: state_listWhereUniqueInput
    update?: XOR<XOR<state_listUpdateToOneWithWhereWithoutOccurrenceInput, state_listUpdateWithoutOccurrenceInput>, state_listUncheckedUpdateWithoutOccurrenceInput>
  }

  export type user_fingerprintUpdateOneRequiredWithoutOccurrenceNestedInput = {
    create?: XOR<user_fingerprintCreateWithoutOccurrenceInput, user_fingerprintUncheckedCreateWithoutOccurrenceInput>
    connectOrCreate?: user_fingerprintCreateOrConnectWithoutOccurrenceInput
    upsert?: user_fingerprintUpsertWithoutOccurrenceInput
    connect?: user_fingerprintWhereUniqueInput
    update?: XOR<XOR<user_fingerprintUpdateToOneWithWhereWithoutOccurrenceInput, user_fingerprintUpdateWithoutOccurrenceInput>, user_fingerprintUncheckedUpdateWithoutOccurrenceInput>
  }

  export type user_occurrencesUpdateManyWithoutOccurrenceNestedInput = {
    create?: XOR<user_occurrencesCreateWithoutOccurrenceInput, user_occurrencesUncheckedCreateWithoutOccurrenceInput> | user_occurrencesCreateWithoutOccurrenceInput[] | user_occurrencesUncheckedCreateWithoutOccurrenceInput[]
    connectOrCreate?: user_occurrencesCreateOrConnectWithoutOccurrenceInput | user_occurrencesCreateOrConnectWithoutOccurrenceInput[]
    upsert?: user_occurrencesUpsertWithWhereUniqueWithoutOccurrenceInput | user_occurrencesUpsertWithWhereUniqueWithoutOccurrenceInput[]
    createMany?: user_occurrencesCreateManyOccurrenceInputEnvelope
    set?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    disconnect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    delete?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    connect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    update?: user_occurrencesUpdateWithWhereUniqueWithoutOccurrenceInput | user_occurrencesUpdateWithWhereUniqueWithoutOccurrenceInput[]
    updateMany?: user_occurrencesUpdateManyWithWhereWithoutOccurrenceInput | user_occurrencesUpdateManyWithWhereWithoutOccurrenceInput[]
    deleteMany?: user_occurrencesScalarWhereInput | user_occurrencesScalarWhereInput[]
  }

  export type user_occurrencesUncheckedUpdateManyWithoutOccurrenceNestedInput = {
    create?: XOR<user_occurrencesCreateWithoutOccurrenceInput, user_occurrencesUncheckedCreateWithoutOccurrenceInput> | user_occurrencesCreateWithoutOccurrenceInput[] | user_occurrencesUncheckedCreateWithoutOccurrenceInput[]
    connectOrCreate?: user_occurrencesCreateOrConnectWithoutOccurrenceInput | user_occurrencesCreateOrConnectWithoutOccurrenceInput[]
    upsert?: user_occurrencesUpsertWithWhereUniqueWithoutOccurrenceInput | user_occurrencesUpsertWithWhereUniqueWithoutOccurrenceInput[]
    createMany?: user_occurrencesCreateManyOccurrenceInputEnvelope
    set?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    disconnect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    delete?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    connect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    update?: user_occurrencesUpdateWithWhereUniqueWithoutOccurrenceInput | user_occurrencesUpdateWithWhereUniqueWithoutOccurrenceInput[]
    updateMany?: user_occurrencesUpdateManyWithWhereWithoutOccurrenceInput | user_occurrencesUpdateManyWithWhereWithoutOccurrenceInput[]
    deleteMany?: user_occurrencesScalarWhereInput | user_occurrencesScalarWhereInput[]
  }

  export type occurrenceCreateNestedManyWithoutState_listInput = {
    create?: XOR<occurrenceCreateWithoutState_listInput, occurrenceUncheckedCreateWithoutState_listInput> | occurrenceCreateWithoutState_listInput[] | occurrenceUncheckedCreateWithoutState_listInput[]
    connectOrCreate?: occurrenceCreateOrConnectWithoutState_listInput | occurrenceCreateOrConnectWithoutState_listInput[]
    createMany?: occurrenceCreateManyState_listInputEnvelope
    connect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
  }

  export type occurrenceUncheckedCreateNestedManyWithoutState_listInput = {
    create?: XOR<occurrenceCreateWithoutState_listInput, occurrenceUncheckedCreateWithoutState_listInput> | occurrenceCreateWithoutState_listInput[] | occurrenceUncheckedCreateWithoutState_listInput[]
    connectOrCreate?: occurrenceCreateOrConnectWithoutState_listInput | occurrenceCreateOrConnectWithoutState_listInput[]
    createMany?: occurrenceCreateManyState_listInputEnvelope
    connect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type occurrenceUpdateManyWithoutState_listNestedInput = {
    create?: XOR<occurrenceCreateWithoutState_listInput, occurrenceUncheckedCreateWithoutState_listInput> | occurrenceCreateWithoutState_listInput[] | occurrenceUncheckedCreateWithoutState_listInput[]
    connectOrCreate?: occurrenceCreateOrConnectWithoutState_listInput | occurrenceCreateOrConnectWithoutState_listInput[]
    upsert?: occurrenceUpsertWithWhereUniqueWithoutState_listInput | occurrenceUpsertWithWhereUniqueWithoutState_listInput[]
    createMany?: occurrenceCreateManyState_listInputEnvelope
    set?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    disconnect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    delete?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    connect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    update?: occurrenceUpdateWithWhereUniqueWithoutState_listInput | occurrenceUpdateWithWhereUniqueWithoutState_listInput[]
    updateMany?: occurrenceUpdateManyWithWhereWithoutState_listInput | occurrenceUpdateManyWithWhereWithoutState_listInput[]
    deleteMany?: occurrenceScalarWhereInput | occurrenceScalarWhereInput[]
  }

  export type occurrenceUncheckedUpdateManyWithoutState_listNestedInput = {
    create?: XOR<occurrenceCreateWithoutState_listInput, occurrenceUncheckedCreateWithoutState_listInput> | occurrenceCreateWithoutState_listInput[] | occurrenceUncheckedCreateWithoutState_listInput[]
    connectOrCreate?: occurrenceCreateOrConnectWithoutState_listInput | occurrenceCreateOrConnectWithoutState_listInput[]
    upsert?: occurrenceUpsertWithWhereUniqueWithoutState_listInput | occurrenceUpsertWithWhereUniqueWithoutState_listInput[]
    createMany?: occurrenceCreateManyState_listInputEnvelope
    set?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    disconnect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    delete?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    connect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    update?: occurrenceUpdateWithWhereUniqueWithoutState_listInput | occurrenceUpdateWithWhereUniqueWithoutState_listInput[]
    updateMany?: occurrenceUpdateManyWithWhereWithoutState_listInput | occurrenceUpdateManyWithWhereWithoutState_listInput[]
    deleteMany?: occurrenceScalarWhereInput | occurrenceScalarWhereInput[]
  }

  export type user_occurrencesCreateNestedManyWithoutUser_fingerprintInput = {
    create?: XOR<user_occurrencesCreateWithoutUser_fingerprintInput, user_occurrencesUncheckedCreateWithoutUser_fingerprintInput> | user_occurrencesCreateWithoutUser_fingerprintInput[] | user_occurrencesUncheckedCreateWithoutUser_fingerprintInput[]
    connectOrCreate?: user_occurrencesCreateOrConnectWithoutUser_fingerprintInput | user_occurrencesCreateOrConnectWithoutUser_fingerprintInput[]
    createMany?: user_occurrencesCreateManyUser_fingerprintInputEnvelope
    connect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
  }

  export type occurrenceCreateNestedManyWithoutUser_fingerprintInput = {
    create?: XOR<occurrenceCreateWithoutUser_fingerprintInput, occurrenceUncheckedCreateWithoutUser_fingerprintInput> | occurrenceCreateWithoutUser_fingerprintInput[] | occurrenceUncheckedCreateWithoutUser_fingerprintInput[]
    connectOrCreate?: occurrenceCreateOrConnectWithoutUser_fingerprintInput | occurrenceCreateOrConnectWithoutUser_fingerprintInput[]
    createMany?: occurrenceCreateManyUser_fingerprintInputEnvelope
    connect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
  }

  export type user_occurrencesUncheckedCreateNestedManyWithoutUser_fingerprintInput = {
    create?: XOR<user_occurrencesCreateWithoutUser_fingerprintInput, user_occurrencesUncheckedCreateWithoutUser_fingerprintInput> | user_occurrencesCreateWithoutUser_fingerprintInput[] | user_occurrencesUncheckedCreateWithoutUser_fingerprintInput[]
    connectOrCreate?: user_occurrencesCreateOrConnectWithoutUser_fingerprintInput | user_occurrencesCreateOrConnectWithoutUser_fingerprintInput[]
    createMany?: user_occurrencesCreateManyUser_fingerprintInputEnvelope
    connect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
  }

  export type occurrenceUncheckedCreateNestedManyWithoutUser_fingerprintInput = {
    create?: XOR<occurrenceCreateWithoutUser_fingerprintInput, occurrenceUncheckedCreateWithoutUser_fingerprintInput> | occurrenceCreateWithoutUser_fingerprintInput[] | occurrenceUncheckedCreateWithoutUser_fingerprintInput[]
    connectOrCreate?: occurrenceCreateOrConnectWithoutUser_fingerprintInput | occurrenceCreateOrConnectWithoutUser_fingerprintInput[]
    createMany?: occurrenceCreateManyUser_fingerprintInputEnvelope
    connect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
  }

  export type user_occurrencesUpdateManyWithoutUser_fingerprintNestedInput = {
    create?: XOR<user_occurrencesCreateWithoutUser_fingerprintInput, user_occurrencesUncheckedCreateWithoutUser_fingerprintInput> | user_occurrencesCreateWithoutUser_fingerprintInput[] | user_occurrencesUncheckedCreateWithoutUser_fingerprintInput[]
    connectOrCreate?: user_occurrencesCreateOrConnectWithoutUser_fingerprintInput | user_occurrencesCreateOrConnectWithoutUser_fingerprintInput[]
    upsert?: user_occurrencesUpsertWithWhereUniqueWithoutUser_fingerprintInput | user_occurrencesUpsertWithWhereUniqueWithoutUser_fingerprintInput[]
    createMany?: user_occurrencesCreateManyUser_fingerprintInputEnvelope
    set?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    disconnect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    delete?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    connect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    update?: user_occurrencesUpdateWithWhereUniqueWithoutUser_fingerprintInput | user_occurrencesUpdateWithWhereUniqueWithoutUser_fingerprintInput[]
    updateMany?: user_occurrencesUpdateManyWithWhereWithoutUser_fingerprintInput | user_occurrencesUpdateManyWithWhereWithoutUser_fingerprintInput[]
    deleteMany?: user_occurrencesScalarWhereInput | user_occurrencesScalarWhereInput[]
  }

  export type occurrenceUpdateManyWithoutUser_fingerprintNestedInput = {
    create?: XOR<occurrenceCreateWithoutUser_fingerprintInput, occurrenceUncheckedCreateWithoutUser_fingerprintInput> | occurrenceCreateWithoutUser_fingerprintInput[] | occurrenceUncheckedCreateWithoutUser_fingerprintInput[]
    connectOrCreate?: occurrenceCreateOrConnectWithoutUser_fingerprintInput | occurrenceCreateOrConnectWithoutUser_fingerprintInput[]
    upsert?: occurrenceUpsertWithWhereUniqueWithoutUser_fingerprintInput | occurrenceUpsertWithWhereUniqueWithoutUser_fingerprintInput[]
    createMany?: occurrenceCreateManyUser_fingerprintInputEnvelope
    set?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    disconnect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    delete?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    connect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    update?: occurrenceUpdateWithWhereUniqueWithoutUser_fingerprintInput | occurrenceUpdateWithWhereUniqueWithoutUser_fingerprintInput[]
    updateMany?: occurrenceUpdateManyWithWhereWithoutUser_fingerprintInput | occurrenceUpdateManyWithWhereWithoutUser_fingerprintInput[]
    deleteMany?: occurrenceScalarWhereInput | occurrenceScalarWhereInput[]
  }

  export type user_occurrencesUncheckedUpdateManyWithoutUser_fingerprintNestedInput = {
    create?: XOR<user_occurrencesCreateWithoutUser_fingerprintInput, user_occurrencesUncheckedCreateWithoutUser_fingerprintInput> | user_occurrencesCreateWithoutUser_fingerprintInput[] | user_occurrencesUncheckedCreateWithoutUser_fingerprintInput[]
    connectOrCreate?: user_occurrencesCreateOrConnectWithoutUser_fingerprintInput | user_occurrencesCreateOrConnectWithoutUser_fingerprintInput[]
    upsert?: user_occurrencesUpsertWithWhereUniqueWithoutUser_fingerprintInput | user_occurrencesUpsertWithWhereUniqueWithoutUser_fingerprintInput[]
    createMany?: user_occurrencesCreateManyUser_fingerprintInputEnvelope
    set?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    disconnect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    delete?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    connect?: user_occurrencesWhereUniqueInput | user_occurrencesWhereUniqueInput[]
    update?: user_occurrencesUpdateWithWhereUniqueWithoutUser_fingerprintInput | user_occurrencesUpdateWithWhereUniqueWithoutUser_fingerprintInput[]
    updateMany?: user_occurrencesUpdateManyWithWhereWithoutUser_fingerprintInput | user_occurrencesUpdateManyWithWhereWithoutUser_fingerprintInput[]
    deleteMany?: user_occurrencesScalarWhereInput | user_occurrencesScalarWhereInput[]
  }

  export type occurrenceUncheckedUpdateManyWithoutUser_fingerprintNestedInput = {
    create?: XOR<occurrenceCreateWithoutUser_fingerprintInput, occurrenceUncheckedCreateWithoutUser_fingerprintInput> | occurrenceCreateWithoutUser_fingerprintInput[] | occurrenceUncheckedCreateWithoutUser_fingerprintInput[]
    connectOrCreate?: occurrenceCreateOrConnectWithoutUser_fingerprintInput | occurrenceCreateOrConnectWithoutUser_fingerprintInput[]
    upsert?: occurrenceUpsertWithWhereUniqueWithoutUser_fingerprintInput | occurrenceUpsertWithWhereUniqueWithoutUser_fingerprintInput[]
    createMany?: occurrenceCreateManyUser_fingerprintInputEnvelope
    set?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    disconnect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    delete?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    connect?: occurrenceWhereUniqueInput | occurrenceWhereUniqueInput[]
    update?: occurrenceUpdateWithWhereUniqueWithoutUser_fingerprintInput | occurrenceUpdateWithWhereUniqueWithoutUser_fingerprintInput[]
    updateMany?: occurrenceUpdateManyWithWhereWithoutUser_fingerprintInput | occurrenceUpdateManyWithWhereWithoutUser_fingerprintInput[]
    deleteMany?: occurrenceScalarWhereInput | occurrenceScalarWhereInput[]
  }

  export type occurrenceCreateNestedOneWithoutUser_occurrencesInput = {
    create?: XOR<occurrenceCreateWithoutUser_occurrencesInput, occurrenceUncheckedCreateWithoutUser_occurrencesInput>
    connectOrCreate?: occurrenceCreateOrConnectWithoutUser_occurrencesInput
    connect?: occurrenceWhereUniqueInput
  }

  export type user_fingerprintCreateNestedOneWithoutUser_occurrencesInput = {
    create?: XOR<user_fingerprintCreateWithoutUser_occurrencesInput, user_fingerprintUncheckedCreateWithoutUser_occurrencesInput>
    connectOrCreate?: user_fingerprintCreateOrConnectWithoutUser_occurrencesInput
    connect?: user_fingerprintWhereUniqueInput
  }

  export type occurrenceUpdateOneRequiredWithoutUser_occurrencesNestedInput = {
    create?: XOR<occurrenceCreateWithoutUser_occurrencesInput, occurrenceUncheckedCreateWithoutUser_occurrencesInput>
    connectOrCreate?: occurrenceCreateOrConnectWithoutUser_occurrencesInput
    upsert?: occurrenceUpsertWithoutUser_occurrencesInput
    connect?: occurrenceWhereUniqueInput
    update?: XOR<XOR<occurrenceUpdateToOneWithWhereWithoutUser_occurrencesInput, occurrenceUpdateWithoutUser_occurrencesInput>, occurrenceUncheckedUpdateWithoutUser_occurrencesInput>
  }

  export type user_fingerprintUpdateOneRequiredWithoutUser_occurrencesNestedInput = {
    create?: XOR<user_fingerprintCreateWithoutUser_occurrencesInput, user_fingerprintUncheckedCreateWithoutUser_occurrencesInput>
    connectOrCreate?: user_fingerprintCreateOrConnectWithoutUser_occurrencesInput
    upsert?: user_fingerprintUpsertWithoutUser_occurrencesInput
    connect?: user_fingerprintWhereUniqueInput
    update?: XOR<XOR<user_fingerprintUpdateToOneWithWhereWithoutUser_occurrencesInput, user_fingerprintUpdateWithoutUser_occurrencesInput>, user_fingerprintUncheckedUpdateWithoutUser_occurrencesInput>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type state_listCreateWithoutOccurrenceInput = {
    id_state?: bigint | number
    uf_state: string
    name_state: string
    num_occurrences?: bigint | number | null
  }

  export type state_listUncheckedCreateWithoutOccurrenceInput = {
    id_state?: bigint | number
    uf_state: string
    name_state: string
    num_occurrences?: bigint | number | null
  }

  export type state_listCreateOrConnectWithoutOccurrenceInput = {
    where: state_listWhereUniqueInput
    create: XOR<state_listCreateWithoutOccurrenceInput, state_listUncheckedCreateWithoutOccurrenceInput>
  }

  export type user_fingerprintCreateWithoutOccurrenceInput = {
    id_user?: bigint | number
    fingerprint: string
    user_occurrences?: user_occurrencesCreateNestedManyWithoutUser_fingerprintInput
  }

  export type user_fingerprintUncheckedCreateWithoutOccurrenceInput = {
    id_user?: bigint | number
    fingerprint: string
    user_occurrences?: user_occurrencesUncheckedCreateNestedManyWithoutUser_fingerprintInput
  }

  export type user_fingerprintCreateOrConnectWithoutOccurrenceInput = {
    where: user_fingerprintWhereUniqueInput
    create: XOR<user_fingerprintCreateWithoutOccurrenceInput, user_fingerprintUncheckedCreateWithoutOccurrenceInput>
  }

  export type user_occurrencesCreateWithoutOccurrenceInput = {
    datetime_violence: Date | string
    user_fingerprint: user_fingerprintCreateNestedOneWithoutUser_occurrencesInput
  }

  export type user_occurrencesUncheckedCreateWithoutOccurrenceInput = {
    datetime_violence: Date | string
    id_user: bigint | number
  }

  export type user_occurrencesCreateOrConnectWithoutOccurrenceInput = {
    where: user_occurrencesWhereUniqueInput
    create: XOR<user_occurrencesCreateWithoutOccurrenceInput, user_occurrencesUncheckedCreateWithoutOccurrenceInput>
  }

  export type user_occurrencesCreateManyOccurrenceInputEnvelope = {
    data: user_occurrencesCreateManyOccurrenceInput | user_occurrencesCreateManyOccurrenceInput[]
    skipDuplicates?: boolean
  }

  export type state_listUpsertWithoutOccurrenceInput = {
    update: XOR<state_listUpdateWithoutOccurrenceInput, state_listUncheckedUpdateWithoutOccurrenceInput>
    create: XOR<state_listCreateWithoutOccurrenceInput, state_listUncheckedCreateWithoutOccurrenceInput>
    where?: state_listWhereInput
  }

  export type state_listUpdateToOneWithWhereWithoutOccurrenceInput = {
    where?: state_listWhereInput
    data: XOR<state_listUpdateWithoutOccurrenceInput, state_listUncheckedUpdateWithoutOccurrenceInput>
  }

  export type state_listUpdateWithoutOccurrenceInput = {
    id_state?: BigIntFieldUpdateOperationsInput | bigint | number
    uf_state?: StringFieldUpdateOperationsInput | string
    name_state?: StringFieldUpdateOperationsInput | string
    num_occurrences?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type state_listUncheckedUpdateWithoutOccurrenceInput = {
    id_state?: BigIntFieldUpdateOperationsInput | bigint | number
    uf_state?: StringFieldUpdateOperationsInput | string
    name_state?: StringFieldUpdateOperationsInput | string
    num_occurrences?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type user_fingerprintUpsertWithoutOccurrenceInput = {
    update: XOR<user_fingerprintUpdateWithoutOccurrenceInput, user_fingerprintUncheckedUpdateWithoutOccurrenceInput>
    create: XOR<user_fingerprintCreateWithoutOccurrenceInput, user_fingerprintUncheckedCreateWithoutOccurrenceInput>
    where?: user_fingerprintWhereInput
  }

  export type user_fingerprintUpdateToOneWithWhereWithoutOccurrenceInput = {
    where?: user_fingerprintWhereInput
    data: XOR<user_fingerprintUpdateWithoutOccurrenceInput, user_fingerprintUncheckedUpdateWithoutOccurrenceInput>
  }

  export type user_fingerprintUpdateWithoutOccurrenceInput = {
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    fingerprint?: StringFieldUpdateOperationsInput | string
    user_occurrences?: user_occurrencesUpdateManyWithoutUser_fingerprintNestedInput
  }

  export type user_fingerprintUncheckedUpdateWithoutOccurrenceInput = {
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    fingerprint?: StringFieldUpdateOperationsInput | string
    user_occurrences?: user_occurrencesUncheckedUpdateManyWithoutUser_fingerprintNestedInput
  }

  export type user_occurrencesUpsertWithWhereUniqueWithoutOccurrenceInput = {
    where: user_occurrencesWhereUniqueInput
    update: XOR<user_occurrencesUpdateWithoutOccurrenceInput, user_occurrencesUncheckedUpdateWithoutOccurrenceInput>
    create: XOR<user_occurrencesCreateWithoutOccurrenceInput, user_occurrencesUncheckedCreateWithoutOccurrenceInput>
  }

  export type user_occurrencesUpdateWithWhereUniqueWithoutOccurrenceInput = {
    where: user_occurrencesWhereUniqueInput
    data: XOR<user_occurrencesUpdateWithoutOccurrenceInput, user_occurrencesUncheckedUpdateWithoutOccurrenceInput>
  }

  export type user_occurrencesUpdateManyWithWhereWithoutOccurrenceInput = {
    where: user_occurrencesScalarWhereInput
    data: XOR<user_occurrencesUpdateManyMutationInput, user_occurrencesUncheckedUpdateManyWithoutOccurrenceInput>
  }

  export type user_occurrencesScalarWhereInput = {
    AND?: user_occurrencesScalarWhereInput | user_occurrencesScalarWhereInput[]
    OR?: user_occurrencesScalarWhereInput[]
    NOT?: user_occurrencesScalarWhereInput | user_occurrencesScalarWhereInput[]
    id_occurrence?: BigIntFilter<"user_occurrences"> | bigint | number
    datetime_violence?: DateTimeFilter<"user_occurrences"> | Date | string
    id_user?: BigIntFilter<"user_occurrences"> | bigint | number
  }

  export type occurrenceCreateWithoutState_listInput = {
    id_occurrence?: bigint | number
    datetime_submission: Date | string
    age_group: string
    datetime_violence: Date | string
    city_violence?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    violences_options: string
    violence_type: string
    user_fingerprint: user_fingerprintCreateNestedOneWithoutOccurrenceInput
    user_occurrences?: user_occurrencesCreateNestedManyWithoutOccurrenceInput
  }

  export type occurrenceUncheckedCreateWithoutState_listInput = {
    id_occurrence?: bigint | number
    id_user: bigint | number
    datetime_submission: Date | string
    age_group: string
    datetime_violence: Date | string
    city_violence?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    violences_options: string
    violence_type: string
    user_occurrences?: user_occurrencesUncheckedCreateNestedManyWithoutOccurrenceInput
  }

  export type occurrenceCreateOrConnectWithoutState_listInput = {
    where: occurrenceWhereUniqueInput
    create: XOR<occurrenceCreateWithoutState_listInput, occurrenceUncheckedCreateWithoutState_listInput>
  }

  export type occurrenceCreateManyState_listInputEnvelope = {
    data: occurrenceCreateManyState_listInput | occurrenceCreateManyState_listInput[]
    skipDuplicates?: boolean
  }

  export type occurrenceUpsertWithWhereUniqueWithoutState_listInput = {
    where: occurrenceWhereUniqueInput
    update: XOR<occurrenceUpdateWithoutState_listInput, occurrenceUncheckedUpdateWithoutState_listInput>
    create: XOR<occurrenceCreateWithoutState_listInput, occurrenceUncheckedCreateWithoutState_listInput>
  }

  export type occurrenceUpdateWithWhereUniqueWithoutState_listInput = {
    where: occurrenceWhereUniqueInput
    data: XOR<occurrenceUpdateWithoutState_listInput, occurrenceUncheckedUpdateWithoutState_listInput>
  }

  export type occurrenceUpdateManyWithWhereWithoutState_listInput = {
    where: occurrenceScalarWhereInput
    data: XOR<occurrenceUpdateManyMutationInput, occurrenceUncheckedUpdateManyWithoutState_listInput>
  }

  export type occurrenceScalarWhereInput = {
    AND?: occurrenceScalarWhereInput | occurrenceScalarWhereInput[]
    OR?: occurrenceScalarWhereInput[]
    NOT?: occurrenceScalarWhereInput | occurrenceScalarWhereInput[]
    id_occurrence?: BigIntFilter<"occurrence"> | bigint | number
    id_user?: BigIntFilter<"occurrence"> | bigint | number
    datetime_submission?: DateTimeFilter<"occurrence"> | Date | string
    age_group?: StringFilter<"occurrence"> | string
    datetime_violence?: DateTimeFilter<"occurrence"> | Date | string
    city_violence?: StringNullableFilter<"occurrence"> | string | null
    state_violence?: StringFilter<"occurrence"> | string
    latitude?: DecimalFilter<"occurrence"> | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFilter<"occurrence"> | Decimal | DecimalJsLike | number | string
    violences_options?: StringFilter<"occurrence"> | string
    violence_type?: StringFilter<"occurrence"> | string
  }

  export type user_occurrencesCreateWithoutUser_fingerprintInput = {
    datetime_violence: Date | string
    occurrence: occurrenceCreateNestedOneWithoutUser_occurrencesInput
  }

  export type user_occurrencesUncheckedCreateWithoutUser_fingerprintInput = {
    id_occurrence: bigint | number
    datetime_violence: Date | string
  }

  export type user_occurrencesCreateOrConnectWithoutUser_fingerprintInput = {
    where: user_occurrencesWhereUniqueInput
    create: XOR<user_occurrencesCreateWithoutUser_fingerprintInput, user_occurrencesUncheckedCreateWithoutUser_fingerprintInput>
  }

  export type user_occurrencesCreateManyUser_fingerprintInputEnvelope = {
    data: user_occurrencesCreateManyUser_fingerprintInput | user_occurrencesCreateManyUser_fingerprintInput[]
    skipDuplicates?: boolean
  }

  export type occurrenceCreateWithoutUser_fingerprintInput = {
    id_occurrence?: bigint | number
    datetime_submission: Date | string
    age_group: string
    datetime_violence: Date | string
    city_violence?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    violences_options: string
    violence_type: string
    state_list: state_listCreateNestedOneWithoutOccurrenceInput
    user_occurrences?: user_occurrencesCreateNestedManyWithoutOccurrenceInput
  }

  export type occurrenceUncheckedCreateWithoutUser_fingerprintInput = {
    id_occurrence?: bigint | number
    datetime_submission: Date | string
    age_group: string
    datetime_violence: Date | string
    city_violence?: string | null
    state_violence: string
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    violences_options: string
    violence_type: string
    user_occurrences?: user_occurrencesUncheckedCreateNestedManyWithoutOccurrenceInput
  }

  export type occurrenceCreateOrConnectWithoutUser_fingerprintInput = {
    where: occurrenceWhereUniqueInput
    create: XOR<occurrenceCreateWithoutUser_fingerprintInput, occurrenceUncheckedCreateWithoutUser_fingerprintInput>
  }

  export type occurrenceCreateManyUser_fingerprintInputEnvelope = {
    data: occurrenceCreateManyUser_fingerprintInput | occurrenceCreateManyUser_fingerprintInput[]
    skipDuplicates?: boolean
  }

  export type user_occurrencesUpsertWithWhereUniqueWithoutUser_fingerprintInput = {
    where: user_occurrencesWhereUniqueInput
    update: XOR<user_occurrencesUpdateWithoutUser_fingerprintInput, user_occurrencesUncheckedUpdateWithoutUser_fingerprintInput>
    create: XOR<user_occurrencesCreateWithoutUser_fingerprintInput, user_occurrencesUncheckedCreateWithoutUser_fingerprintInput>
  }

  export type user_occurrencesUpdateWithWhereUniqueWithoutUser_fingerprintInput = {
    where: user_occurrencesWhereUniqueInput
    data: XOR<user_occurrencesUpdateWithoutUser_fingerprintInput, user_occurrencesUncheckedUpdateWithoutUser_fingerprintInput>
  }

  export type user_occurrencesUpdateManyWithWhereWithoutUser_fingerprintInput = {
    where: user_occurrencesScalarWhereInput
    data: XOR<user_occurrencesUpdateManyMutationInput, user_occurrencesUncheckedUpdateManyWithoutUser_fingerprintInput>
  }

  export type occurrenceUpsertWithWhereUniqueWithoutUser_fingerprintInput = {
    where: occurrenceWhereUniqueInput
    update: XOR<occurrenceUpdateWithoutUser_fingerprintInput, occurrenceUncheckedUpdateWithoutUser_fingerprintInput>
    create: XOR<occurrenceCreateWithoutUser_fingerprintInput, occurrenceUncheckedCreateWithoutUser_fingerprintInput>
  }

  export type occurrenceUpdateWithWhereUniqueWithoutUser_fingerprintInput = {
    where: occurrenceWhereUniqueInput
    data: XOR<occurrenceUpdateWithoutUser_fingerprintInput, occurrenceUncheckedUpdateWithoutUser_fingerprintInput>
  }

  export type occurrenceUpdateManyWithWhereWithoutUser_fingerprintInput = {
    where: occurrenceScalarWhereInput
    data: XOR<occurrenceUpdateManyMutationInput, occurrenceUncheckedUpdateManyWithoutUser_fingerprintInput>
  }

  export type occurrenceCreateWithoutUser_occurrencesInput = {
    id_occurrence?: bigint | number
    datetime_submission: Date | string
    age_group: string
    datetime_violence: Date | string
    city_violence?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    violences_options: string
    violence_type: string
    state_list: state_listCreateNestedOneWithoutOccurrenceInput
    user_fingerprint: user_fingerprintCreateNestedOneWithoutOccurrenceInput
  }

  export type occurrenceUncheckedCreateWithoutUser_occurrencesInput = {
    id_occurrence?: bigint | number
    id_user: bigint | number
    datetime_submission: Date | string
    age_group: string
    datetime_violence: Date | string
    city_violence?: string | null
    state_violence: string
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    violences_options: string
    violence_type: string
  }

  export type occurrenceCreateOrConnectWithoutUser_occurrencesInput = {
    where: occurrenceWhereUniqueInput
    create: XOR<occurrenceCreateWithoutUser_occurrencesInput, occurrenceUncheckedCreateWithoutUser_occurrencesInput>
  }

  export type user_fingerprintCreateWithoutUser_occurrencesInput = {
    id_user?: bigint | number
    fingerprint: string
    occurrence?: occurrenceCreateNestedManyWithoutUser_fingerprintInput
  }

  export type user_fingerprintUncheckedCreateWithoutUser_occurrencesInput = {
    id_user?: bigint | number
    fingerprint: string
    occurrence?: occurrenceUncheckedCreateNestedManyWithoutUser_fingerprintInput
  }

  export type user_fingerprintCreateOrConnectWithoutUser_occurrencesInput = {
    where: user_fingerprintWhereUniqueInput
    create: XOR<user_fingerprintCreateWithoutUser_occurrencesInput, user_fingerprintUncheckedCreateWithoutUser_occurrencesInput>
  }

  export type occurrenceUpsertWithoutUser_occurrencesInput = {
    update: XOR<occurrenceUpdateWithoutUser_occurrencesInput, occurrenceUncheckedUpdateWithoutUser_occurrencesInput>
    create: XOR<occurrenceCreateWithoutUser_occurrencesInput, occurrenceUncheckedCreateWithoutUser_occurrencesInput>
    where?: occurrenceWhereInput
  }

  export type occurrenceUpdateToOneWithWhereWithoutUser_occurrencesInput = {
    where?: occurrenceWhereInput
    data: XOR<occurrenceUpdateWithoutUser_occurrencesInput, occurrenceUncheckedUpdateWithoutUser_occurrencesInput>
  }

  export type occurrenceUpdateWithoutUser_occurrencesInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
    state_list?: state_listUpdateOneRequiredWithoutOccurrenceNestedInput
    user_fingerprint?: user_fingerprintUpdateOneRequiredWithoutOccurrenceNestedInput
  }

  export type occurrenceUncheckedUpdateWithoutUser_occurrencesInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    state_violence?: StringFieldUpdateOperationsInput | string
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
  }

  export type user_fingerprintUpsertWithoutUser_occurrencesInput = {
    update: XOR<user_fingerprintUpdateWithoutUser_occurrencesInput, user_fingerprintUncheckedUpdateWithoutUser_occurrencesInput>
    create: XOR<user_fingerprintCreateWithoutUser_occurrencesInput, user_fingerprintUncheckedCreateWithoutUser_occurrencesInput>
    where?: user_fingerprintWhereInput
  }

  export type user_fingerprintUpdateToOneWithWhereWithoutUser_occurrencesInput = {
    where?: user_fingerprintWhereInput
    data: XOR<user_fingerprintUpdateWithoutUser_occurrencesInput, user_fingerprintUncheckedUpdateWithoutUser_occurrencesInput>
  }

  export type user_fingerprintUpdateWithoutUser_occurrencesInput = {
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    fingerprint?: StringFieldUpdateOperationsInput | string
    occurrence?: occurrenceUpdateManyWithoutUser_fingerprintNestedInput
  }

  export type user_fingerprintUncheckedUpdateWithoutUser_occurrencesInput = {
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    fingerprint?: StringFieldUpdateOperationsInput | string
    occurrence?: occurrenceUncheckedUpdateManyWithoutUser_fingerprintNestedInput
  }

  export type user_occurrencesCreateManyOccurrenceInput = {
    datetime_violence: Date | string
    id_user: bigint | number
  }

  export type user_occurrencesUpdateWithoutOccurrenceInput = {
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    user_fingerprint?: user_fingerprintUpdateOneRequiredWithoutUser_occurrencesNestedInput
  }

  export type user_occurrencesUncheckedUpdateWithoutOccurrenceInput = {
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type user_occurrencesUncheckedUpdateManyWithoutOccurrenceInput = {
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type occurrenceCreateManyState_listInput = {
    id_occurrence?: bigint | number
    id_user: bigint | number
    datetime_submission: Date | string
    age_group: string
    datetime_violence: Date | string
    city_violence?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    violences_options: string
    violence_type: string
  }

  export type occurrenceUpdateWithoutState_listInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
    user_fingerprint?: user_fingerprintUpdateOneRequiredWithoutOccurrenceNestedInput
    user_occurrences?: user_occurrencesUpdateManyWithoutOccurrenceNestedInput
  }

  export type occurrenceUncheckedUpdateWithoutState_listInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
    user_occurrences?: user_occurrencesUncheckedUpdateManyWithoutOccurrenceNestedInput
  }

  export type occurrenceUncheckedUpdateManyWithoutState_listInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    id_user?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
  }

  export type user_occurrencesCreateManyUser_fingerprintInput = {
    id_occurrence: bigint | number
    datetime_violence: Date | string
  }

  export type occurrenceCreateManyUser_fingerprintInput = {
    id_occurrence?: bigint | number
    datetime_submission: Date | string
    age_group: string
    datetime_violence: Date | string
    city_violence?: string | null
    state_violence: string
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    violences_options: string
    violence_type: string
  }

  export type user_occurrencesUpdateWithoutUser_fingerprintInput = {
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrence?: occurrenceUpdateOneRequiredWithoutUser_occurrencesNestedInput
  }

  export type user_occurrencesUncheckedUpdateWithoutUser_fingerprintInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_occurrencesUncheckedUpdateManyWithoutUser_fingerprintInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type occurrenceUpdateWithoutUser_fingerprintInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
    state_list?: state_listUpdateOneRequiredWithoutOccurrenceNestedInput
    user_occurrences?: user_occurrencesUpdateManyWithoutOccurrenceNestedInput
  }

  export type occurrenceUncheckedUpdateWithoutUser_fingerprintInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    state_violence?: StringFieldUpdateOperationsInput | string
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
    user_occurrences?: user_occurrencesUncheckedUpdateManyWithoutOccurrenceNestedInput
  }

  export type occurrenceUncheckedUpdateManyWithoutUser_fingerprintInput = {
    id_occurrence?: BigIntFieldUpdateOperationsInput | bigint | number
    datetime_submission?: DateTimeFieldUpdateOperationsInput | Date | string
    age_group?: StringFieldUpdateOperationsInput | string
    datetime_violence?: DateTimeFieldUpdateOperationsInput | Date | string
    city_violence?: NullableStringFieldUpdateOperationsInput | string | null
    state_violence?: StringFieldUpdateOperationsInput | string
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    violences_options?: StringFieldUpdateOperationsInput | string
    violence_type?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use OccurrenceCountOutputTypeDefaultArgs instead
     */
    export type OccurrenceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OccurrenceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use State_listCountOutputTypeDefaultArgs instead
     */
    export type State_listCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = State_listCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use User_fingerprintCountOutputTypeDefaultArgs instead
     */
    export type User_fingerprintCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = User_fingerprintCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use occurrenceDefaultArgs instead
     */
    export type occurrenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = occurrenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use state_listDefaultArgs instead
     */
    export type state_listArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = state_listDefaultArgs<ExtArgs>
    /**
     * @deprecated Use types_of_violenceDefaultArgs instead
     */
    export type types_of_violenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = types_of_violenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_fingerprintDefaultArgs instead
     */
    export type user_fingerprintArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_fingerprintDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_occurrencesDefaultArgs instead
     */
    export type user_occurrencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_occurrencesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use violence_situationsDefaultArgs instead
     */
    export type violence_situationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = violence_situationsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}